{"config":{"lang":["en"],"separator":"[\\s\\u200b\\u3000\\-\u3001\u3002\uff0c\uff0e\uff1f\uff01\uff1b]+","pipeline":["stemmer"]},"docs":[{"location":"","title":"python GDAL/OGR \u4e2d\u6587\u624b\u518c","text":"<p>\u672c\u9879\u76ee\u662f\u7ffb\u8bd1\u9879\u76ee\uff0c\u82f1\u6587\u9879\u76ee\u5730\u5740\uff1ahttps://github.com/pcjericks/py-gdalogr-cookbook</p>"},{"location":"%E4%B8%80%E8%88%AC%E4%BD%BF%E7%94%A8/","title":"GDAL/OGR\u4e00\u822c\u4f7f\u7528","text":""},{"location":"%E4%B8%80%E8%88%AC%E4%BD%BF%E7%94%A8/#_1","title":"\u68c0\u6d4b\u5b89\u88c5","text":"<pre><code>from osgeo import gdal\n</code></pre>"},{"location":"%E4%B8%80%E8%88%AC%E4%BD%BF%E7%94%A8/#_2","title":"\u67e5\u770b\u7248\u672c","text":"<pre><code>gdal.VersionInfo('VERSION_NUM')\n\n# '2040100'\n</code></pre>"},{"location":"%E4%B8%80%E8%88%AC%E4%BD%BF%E7%94%A8/#python","title":"\u5f00\u542fpython\u5f02\u5e38","text":"<p>\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u53d1\u751f\u9519\u8bef\u65f6\uff0cGDAL/OGR Python\u7ed1\u5b9a\u4e0d\u4f1a\u5f15\u53d1\u5f02\u5e38\u3002\u76f8\u53cd\uff0c\u5b83\u4eec\u8fd4\u56de\u9519\u8bef\u503c\uff08\u4f8b\u5982None\uff09\uff0c\u5e76\u5c06\u9519\u8bef\u6d88\u606f\u5199\u5165sys.stdout\u3002\u4f60\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528UseExceptions()\u51fd\u6570\u6765\u5f00\u542f\u5f02\u5e38\uff1a</p> <pre><code>from osgeo import gdal\n\n# \u5f00\u542f\u5f02\u5e38\ngdal.UseExceptions()\n\n# \u6253\u5f00\u4e0d\u5b58\u5728\u7684\u6570\u636e\u96c6\nds = gdal.Open('test.tif')\n\n# \u5f00\u542f\u5f02\u5e38\u524d\nERROR 4: test.tif: No such file or directory\n# \u5f00\u542f\u5f02\u5e38\u540e\nRuntimeError                              Traceback (most recent call last)\n&lt;ipython-input-5-6ef000fdc647&gt; in &lt;module&gt;\n----&gt; 1 gdal.Open(\"test.tif\")\n\nc:\\program files\\python37\\lib\\site-packages\\osgeo\\gdal.py in Open(*args)\n   3114 def Open(*args):\n   3115     \"\"\"Open(char const * utf8_path, GDALAccess eAccess) -&gt; Dataset\"\"\"\n-&gt; 3116     return _gdal.Open(*args)\n   3117\n   3118 def OpenEx(*args, **kwargs):\n\nRuntimeError: test.tif: No such file or directory\n</code></pre> <p>\u4f60\u53ef\u4ee5\u5728\u8fd0\u884c\u7684\u4efb\u4f55\u65f6\u5019\u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\u7981\u7528GDAL/OGR\u5f02\u5e38\uff1a</p> <pre><code>gdal.DontUseExceptions()\n</code></pre>"},{"location":"%E4%B8%80%E8%88%AC%E4%BD%BF%E7%94%A8/#gdal-ogr","title":"\u5b89\u88c5GDAL OGR\u9519\u8bef\u5904\u7406","text":"<p>\u5b89\u88c5GDAL\u9519\u8bef\u5904\u7406\u7a0b\u5e8f\u529f\u80fd\uff0c\u4ee5\u6355\u83b7GDAL\u9519\u8bef\u3001\u7c7b\u548c\u6d88\u606f\u3002\u4ec5\u9002\u7528\u4e8eGDAL 1.10\u4ee5\u4e0a\u7684\u7248\u672c\u3002</p> <pre><code>from osgeo import ogr, osr, gdal\n\n# GDAL\u9519\u8bef\u5904\u7406\u65b9\u6cd5\ndef gdal_error_handler(err_class, err_num, err_msg):\n    errtype = {\n            gdal.CE_None:'None',\n            gdal.CE_Debug:'Debug',\n            gdal.CE_Warning:'Warning',\n            gdal.CE_Failure:'Failure',\n            gdal.CE_Fatal:'Fatal'\n    }\n    err_msg = err_msg.replace('\\n',' ')\n    err_class = errtype.get(err_class, 'None')\n    print('Error Number: %s' % (err_num))\n    print('Error Type: %s' % (err_class))\n    print('Error Message: %s' % (err_msg))\n\nif __name__=='__main__':\n\n    # \u5b89\u88c5\u9519\u8bef\u5904\u7406\n    gdal.PushErrorHandler(gdal_error_handler)\n\n    # \u629b\u51fa\u4e00\u4e2a\u5047\u7684\u9519\u8bef\n    gdal.Error(1, 2, 'test error')\n\n    # \u5378\u8f7d\u9519\u8bef\u5904\u7406\n    gdal.PopErrorHandler()\n</code></pre>"},{"location":"%E5%87%A0%E4%BD%95/","title":"\u51e0\u4f55","text":""},{"location":"%E5%87%A0%E4%BD%95/#_2","title":"\u521b\u5efa\u70b9","text":"<pre><code>from osgeo import ogr\npoint = ogr.Geometry(ogr.wkbPoint)\npoint.AddPoint(1198054.34, 648493.09)\nprint(point.ExportToWkt())\n</code></pre>"},{"location":"%E5%87%A0%E4%BD%95/#_3","title":"\u521b\u5efa\u7ebf","text":"<pre><code>from osgeo import ogr\nline = ogr.Geometry(ogr.wkbLineString)\nline.AddPoint(1116651.439379124, 637392.6969887456)\nline.AddPoint(1188804.0108498496, 652655.7409537067)\nline.AddPoint(1226730.3625203592, 634155.0816022386)\nline.AddPoint(1281307.30760719, 636467.6640211721)\nprint(line.ExportToWkt())\n</code></pre>"},{"location":"%E5%87%A0%E4%BD%95/#_4","title":"\u521b\u5efa\u591a\u8fb9\u5f62","text":"<pre><code>from osgeo import ogr\n\n# \u521b\u5efa\u73af\nring = ogr.Geometry(ogr.wkbLinearRing)\nring.AddPoint(1179091.1646903288, 712782.8838459781)\nring.AddPoint(1161053.0218226474, 667456.2684348812)\nring.AddPoint(1214704.933941905, 641092.8288590391)\nring.AddPoint(1228580.428455506, 682719.3123998424)\nring.AddPoint(1218405.0658121984, 721108.1805541387)\nring.AddPoint(1179091.1646903288, 712782.8838459781)\n\n# \u521b\u5efa\u591a\u8fb9\u5f62\npoly = ogr.Geometry(ogr.wkbPolygon)\npoly.AddGeometry(ring)\n\nprint(poly.ExportToWkt())\n</code></pre>"},{"location":"%E5%87%A0%E4%BD%95/#_5","title":"\u521b\u5efa\u5e26\u6d1e\u7684\u591a\u8fb9\u5f62","text":"<pre><code>from osgeo import ogr\n\n# \u521b\u5efa\u5185\u73af\noutRing = ogr.Geometry(ogr.wkbLinearRing)\noutRing.AddPoint(1154115.274565847, 686419.4442701361)\noutRing.AddPoint(1154115.274565847, 653118.2574374934)\noutRing.AddPoint(1165678.1866605144, 653118.2574374934)\noutRing.AddPoint(1165678.1866605144, 686419.4442701361)\noutRing.AddPoint(1154115.274565847, 686419.4442701361)\n\n# \u521b\u5efa\u5916\u73af\ninnerRing = ogr.Geometry(ogr.wkbLinearRing)\ninnerRing.AddPoint(1149490.1097279799, 691044.6091080031)\ninnerRing.AddPoint(1149490.1097279799, 648030.5761158396)\ninnerRing.AddPoint(1191579.1097525698, 648030.5761158396)\ninnerRing.AddPoint(1191579.1097525698, 691044.6091080031)\ninnerRing.AddPoint(1149490.1097279799, 691044.6091080031)\n\n# \u521b\u5efa\u591a\u8fb9\u5f62\npoly = ogr.Geometry(ogr.wkbPolygon)\npoly.AddGeometry(outRing)\npoly.AddGeometry(innerRing)\n\nprint(poly.ExportToWkt())\n</code></pre>"},{"location":"%E5%87%A0%E4%BD%95/#_6","title":"\u521b\u5efa\u591a\u90e8\u4ef6\u70b9","text":"<pre><code>from osgeo import ogr\n\nmultipoint = ogr.Geometry(ogr.wkbMultiPoint)\n\npoint1 = ogr.Geometry(ogr.wkbPoint)\npoint1.AddPoint(1251243.7361610543, 598078.7958668759)\nmultipoint.AddGeometry(point1)\n\npoint2 = ogr.Geometry(ogr.wkbPoint)\npoint2.AddPoint(1240605.8570339603, 601778.9277371694)\nmultipoint.AddGeometry(point2)\n\npoint3 = ogr.Geometry(ogr.wkbPoint)\npoint3.AddPoint(1250318.7031934808, 606404.0925750365)\nmultipoint.AddGeometry(point3)\n\nprint(multipoint.ExportToWkt())\n</code></pre>"},{"location":"%E5%87%A0%E4%BD%95/#_7","title":"\u521b\u5efa\u591a\u90e8\u4ef6\u7ebf","text":"<pre><code>from osgeo import ogr\n\nmultiline = ogr.Geometry(ogr.wkbMultiLineString)\n\nline1 = ogr.Geometry(ogr.wkbLineString)\nline1.AddPoint(1214242.4174581182, 617041.9717021306)\nline1.AddPoint(1234593.142744733, 629529.9167643716)\nmultiline.AddGeometry(line1)\n\nline1 = ogr.Geometry(ogr.wkbLineString)\nline1.AddPoint(1184641.3624957693, 626754.8178616514)\nline1.AddPoint(1219792.6152635587, 606866.6090588232)\nmultiline.AddGeometry(line1)\n\nprint(multiline.ExportToWkt())\n</code></pre>"},{"location":"%E5%87%A0%E4%BD%95/#_8","title":"\u521b\u5efa\u591a\u90e8\u4ef6\u591a\u8fb9\u5f62","text":"<pre><code>from osgeo import ogr\n\nmultipolygon = ogr.Geometry(ogr.wkbMultiPolygon)\n\n# \u521b\u5efa\u73af #1\nring1 = ogr.Geometry(ogr.wkbLinearRing)\nring1.AddPoint(1204067.0548148106, 634617.5980860253)\nring1.AddPoint(1204067.0548148106, 620742.1035724243)\nring1.AddPoint(1215167.4504256917, 620742.1035724243)\nring1.AddPoint(1215167.4504256917, 634617.5980860253)\nring1.AddPoint(1204067.0548148106, 634617.5980860253)\n\n# \u521b\u5efa\u591a\u8fb9\u5f62 #1\npoly1 = ogr.Geometry(ogr.wkbPolygon)\npoly1.AddGeometry(ring1)\nmultipolygon.AddGeometry(poly1)\n\n# \u521b\u5efa\u73af #2\nring2 = ogr.Geometry(ogr.wkbLinearRing)\nring2.AddPoint(1179553.6811741155, 647105.5431482664)\nring2.AddPoint(1179553.6811741155, 626292.3013778647)\nring2.AddPoint(1194354.20865529, 626292.3013778647)\nring2.AddPoint(1194354.20865529, 647105.5431482664)\nring2.AddPoint(1179553.6811741155, 647105.5431482664)\n\n# \u521b\u5efa\u591a\u8fb9\u5f62 #2\npoly2 = ogr.Geometry(ogr.wkbPolygon)\npoly2.AddGeometry(ring2)\nmultipolygon.AddGeometry(poly2)\n\nprint(multipolygon.ExportToWkt())\n</code></pre>"},{"location":"%E5%87%A0%E4%BD%95/#_9","title":"\u521b\u5efa\u51e0\u4f55\u96c6\u5408","text":"<pre><code>from osgeo import ogr\n\n# \u521b\u5efa\u51e0\u4f55\u96c6\u5408\ngeomcol =  ogr.Geometry(ogr.wkbGeometryCollection)\n\n# \u6dfb\u52a0\u70b9\npoint = ogr.Geometry(ogr.wkbPoint)\npoint.AddPoint(-122.23, 47.09)\ngeomcol.AddGeometry(point)\n\n# \u6dfb\u52a0\u7ebf\nline = ogr.Geometry(ogr.wkbLineString)\nline.AddPoint(-122.60, 47.14)\nline.AddPoint(-122.48, 47.23)\ngeomcol.AddGeometry(line)\n\nprint(geomcol.ExportToWkt())\n</code></pre>"},{"location":"%E5%87%A0%E4%BD%95/#wkt","title":"\u4eceWKT\u521b\u5efa\u51e0\u4f55","text":"<pre><code>from osgeo import ogr\n\nwkt = \"POINT (1120351.5712494177 741921.4223245403)\"\npoint = ogr.CreateGeometryFromWkt(wkt)\nprint(\"%d,%d\" % (point.GetX(), point.GetY()))\n</code></pre>"},{"location":"%E5%87%A0%E4%BD%95/#geojson","title":"\u4eceGeoJSON\u521b\u5efa\u51e0\u4f55","text":"<pre><code>from osgeo import ogr\n\ngeojson = \"\"\"{\"type\":\"Point\",\"coordinates\":[108420.33,753808.59]}\"\"\"\npoint = ogr.CreateGeometryFromJson(geojson)\nprint(\"%d,%d\" % (point.GetX(), point.GetY()))\n</code></pre>"},{"location":"%E5%87%A0%E4%BD%95/#gml","title":"\u4eceGML\u521b\u5efa\u51e0\u4f55","text":"<pre><code>from osgeo import ogr\n\ngml = \"\"\"&lt;gml:Point xmlns:gml=\"http://www.opengis.net/gml\"&gt;&lt;gml:coordinates&gt;108420.33,753808.59&lt;/gml:coordinates&gt;&lt;/gml:Point&gt;\"\"\"\npoint = ogr.CreateGeometryFromGML(gml)\nprint(\"%d,%d\" % (point.GetX(), point.GetY()))\n</code></pre>"},{"location":"%E5%87%A0%E4%BD%95/#wkb","title":"\u4eceWKB\u521b\u5efa\u51e0\u4f55","text":"<pre><code>from osgeo import ogr\nfrom base64 import b64decode\n\nwkb = b64decode(\"AIAAAAFBMkfmVwo9cUEjylouFHrhAAAAAAAAAAA=\")\npoint = ogr.CreateGeometryFromWkb(wkb)\nprint(\"%d,%d\" % (point.GetX(), point.GetY()))\n</code></pre>"},{"location":"%E5%87%A0%E4%BD%95/#_10","title":"\u8ba1\u7b97\u70b9\u7684\u4e2a\u6570","text":"<pre><code>from osgeo import ogr\n\nwkt = \"LINESTRING (1181866.263593049 615654.4222507705, 1205917.1207499576 623979.7189589312, 1227192.8790041457 643405.4112779726, 1224880.2965852122 665143.6860159477)\"\ngeom = ogr.CreateGeometryFromWkt(wkt)\nprint(\"Geometry has %i points\" % (geom.GetPointCount()))\n</code></pre>"},{"location":"%E5%87%A0%E4%BD%95/#_11","title":"\u8ba1\u7b97\u51e0\u4f55\u4e2a\u6570","text":"<pre><code>from osgeo import ogr\n\nwkt = \"MULTIPOINT (1181866.263593049 615654.4222507705, 1205917.1207499576 623979.7189589312, 1227192.8790041457 643405.4112779726, 1224880.2965852122 665143.6860159477)\"\ngeom = ogr.CreateGeometryFromWkt(wkt)\nprint(\"Geometry has %i geometries\" % (geom.GetGeometryCount()))\n</code></pre>"},{"location":"%E5%87%A0%E4%BD%95/#_12","title":"\u8fed\u4ee3\u51e0\u4f55","text":"<pre><code>from osgeo import ogr\n\nwkt = \"MULTIPOINT (1181866.263593049 615654.4222507705, 1205917.1207499576 623979.7189589312, 1227192.8790041457 643405.4112779726, 1224880.2965852122 665143.6860159477)\"\ngeom = ogr.CreateGeometryFromWkt(wkt)\nfor i in range(0, geom.GetGeometryCount()):\n    g = geom.GetGeometryRef(i)\n    print(\"%i). %s\" %(i, g.ExportToWkt()))\n</code></pre>"},{"location":"%E5%87%A0%E4%BD%95/#_13","title":"\u8fed\u4ee3\u70b9","text":"<pre><code>from osgeo import ogr\n\nwkt = \"LINESTRING (1181866.263593049 615654.4222507705, 1205917.1207499576 623979.7189589312, 1227192.8790041457 643405.4112779726, 1224880.2965852122 665143.6860159477)\"\ngeom = ogr.CreateGeometryFromWkt(wkt)\nfor i in range(0, geom.GetPointCount()):\n    # GetPoint \u8fd4\u56de\u4e00\u4e2a\u5143\u4fc4\u65e5\u4e0d\u662f\u4e00\u4e2aGeometry\n    pt = geom.GetPoint(i)\n    print(\"%i). POINT (%d %d)\" %(i, pt[0], pt[1]))\n</code></pre>"},{"location":"%E5%87%A0%E4%BD%95/#_14","title":"\u51e0\u4f55\u7f13\u51b2\u533a","text":"<pre><code>from osgeo import ogr\n\nwkt = \"POINT (1198054.34 648493.09)\"\npt = ogr.CreateGeometryFromWkt(wkt)\nbufferDistance = 500\npoly = pt.Buffer(bufferDistance)\nprint(\"%s buffered by %d is %s\" % (pt.ExportToWkt(), bufferDistance, poly.ExportToWkt()))\n</code></pre>"},{"location":"%E5%87%A0%E4%BD%95/#_15","title":"\u8ba1\u7b97\u5305\u56f4\u76d2","text":"<pre><code>from osgeo import ogr\n\nwkt = \"LINESTRING (1181866.263593049 615654.4222507705, 1205917.1207499576 623979.7189589312, 1227192.8790041457 643405.4112779726, 1224880.2965852122 665143.6860159477)\"\ngeom = ogr.CreateGeometryFromWkt(wkt)\n# GetEnvelope \u996dhi\u4e00\u4e2a\u5143\u7ec4 (minX, maxX, minY, maxY)\nenv = geom.GetEnvelope()\nprint(\"minX: %d, minY: %d, maxX: %d, maxY: %d\" %(env[0],env[2],env[1],env[3]))\n</code></pre>"},{"location":"%E5%87%A0%E4%BD%95/#_16","title":"\u8ba1\u7b97\u9762\u79ef","text":"<pre><code>from osgeo import ogr\n\nwkt = \"POLYGON ((1162440.5712740074 672081.4332727483, 1162440.5712740074 647105.5431482664, 1195279.2416228633 647105.5431482664, 1195279.2416228633 672081.4332727483, 1162440.5712740074 672081.4332727483))\"\npoly = ogr.CreateGeometryFromWkt(wkt)\nprint(\"Area = %d\" % poly.GetArea())\n</code></pre>"},{"location":"%E5%87%A0%E4%BD%95/#_17","title":"\u8ba1\u7b97\u957f\u5ea6","text":"<pre><code>from osgeo import ogr\n\nwkt = \"LINESTRING (1181866.263593049 615654.4222507705, 1205917.1207499576 623979.7189589312, 1227192.8790041457 643405.4112779726, 1224880.2965852122 665143.6860159477)\"\ngeom = ogr.CreateGeometryFromWkt(wkt)\nprint(\"Length = %d\" % geom.Length())\n</code></pre>"},{"location":"%E5%87%A0%E4%BD%95/#_18","title":"\u83b7\u5f97\u51e0\u4f55\u7c7b\u578b","text":"<pre><code>from osgeo import ogr\n\nwkts = [\n    \"POINT (1198054.34 648493.09)\",\n    \"LINESTRING (1181866.263593049 615654.4222507705, 1205917.1207499576 623979.7189589312, 1227192.8790041457 643405.4112779726, 1224880.2965852122 665143.6860159477)\",\n    \"POLYGON ((1162440.5712740074 672081.4332727483, 1162440.5712740074 647105.5431482664, 1195279.2416228633 647105.5431482664, 1195279.2416228633 672081.4332727483, 1162440.5712740074 672081.4332727483))\"\n]\n\nfor wkt in wkts:\n    geom = ogr.CreateGeometryFromWkt(wkt)\n    print(geom.GetGeometryName())\n</code></pre>"},{"location":"%E5%87%A0%E4%BD%95/#_19","title":"\u8ba1\u7b97\u51e0\u4f55\u76f8\u4ea4","text":"<pre><code>from osgeo import ogr\n\nwkt1 = \"POLYGON ((1208064.271243039 624154.6783778917, 1208064.271243039 601260.9785661874, 1231345.9998651114 601260.9785661874, 1231345.9998651114 624154.6783778917, 1208064.271243039 624154.6783778917))\"\nwkt2 = \"POLYGON ((1199915.6662253144 633079.3410163528, 1199915.6662253144 614453.958118695, 1219317.1067437078 614453.958118695, 1219317.1067437078 633079.3410163528, 1199915.6662253144 633079.3410163528)))\"\n\npoly1 = ogr.CreateGeometryFromWkt(wkt1)\npoly2 = ogr.CreateGeometryFromWkt(wkt2)\n\nintersection = poly1.Intersection(poly2)\n\nprint(intersection.ExportToWkt())\n</code></pre>"},{"location":"%E5%87%A0%E4%BD%95/#_20","title":"\u8ba1\u7b97\u51e0\u4f55\u5e76\u96c6","text":"<pre><code>from osgeo import ogr\n\nwkt1 = \"POLYGON ((1208064.271243039 624154.6783778917, 1208064.271243039 601260.9785661874, 1231345.9998651114 601260.9785661874, 1231345.9998651114 624154.6783778917, 1208064.271243039 624154.6783778917))\"\nwkt2 = \"POLYGON ((1199915.6662253144 633079.3410163528, 1199915.6662253144 614453.958118695, 1219317.1067437078 614453.958118695, 1219317.1067437078 633079.3410163528, 1199915.6662253144 633079.3410163528)))\"\n\npoly1 = ogr.CreateGeometryFromWkt(wkt1)\npoly2 = ogr.CreateGeometryFromWkt(wkt2)\n\nunion = poly1.Union(poly2)\n\nprint(poly1)\nprint(poly2)\nprint(union.ExportToWkt())\n</code></pre>"},{"location":"%E5%87%A0%E4%BD%95/#geojson_1","title":"\u8f93\u51fa\u51e0\u4f55\u5230GeoJSON","text":"<p>\u6709\u4e24\u4e2a\u9009\u9879\u53ef\u4ece\u51e0\u4f55\u56fe\u5f62\u521b\u5efaGeoJSON\u3002</p> <p>\u4f60\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a\u65b0\u7684GeoJSON\u6587\u4ef6\uff0c\u4e5f\u53ef\u4ee5\u76f4\u63a5\u5c06\u51e0\u4f55\u56fe\u5f62\u5bfc\u51fa\u5230Json\u5e76\u8fdb\u884c\u6253\u5370\uff0c\u8fd9\u4e24\u4e2a\u9009\u9879\u5c06\u5728\u4e0b\u9762\u8bf4\u660e\u3002</p> <pre><code>from osgeo import ogr\n\n# \u521b\u5efa\u6d4b\u8bd5\u591a\u8fb9\u5f62\nring = ogr.Geometry(ogr.wkbLinearRing)\nring.AddPoint(1179091.1646903288, 712782.8838459781)\nring.AddPoint(1161053.0218226474, 667456.2684348812)\nring.AddPoint(1214704.933941905, 641092.8288590391)\nring.AddPoint(1228580.428455506, 682719.3123998424)\nring.AddPoint(1218405.0658121984, 721108.1805541387)\nring.AddPoint(1179091.1646903288, 712782.8838459781)\npoly = ogr.Geometry(ogr.wkbPolygon)\npoly.AddGeometry(ring)\n\n# \u521b\u5efa\u8f93\u51fa\u9a71\u52a8\noutDriver = ogr.GetDriverByName('GeoJSON')\n\n# \u521b\u5efa\u8f93\u51faGeoJSON\noutDataSource = outDriver.CreateDataSource('test.geojson')\noutLayer = outDataSource.CreateLayer('test.geojson', geom_type=ogr.wkbPolygon )\n\n# \u521b\u5efa\u8981\u7d20\u5b9a\u4e49\nfeatureDefn = outLayer.GetLayerDefn()\n\n# \u521b\u5efa\u65b0\u8981\u7d20\noutFeature = ogr.Feature(featureDefn)\n\n# \u8bbe\u7f6e\u65b0\u51e0\u4f55\noutFeature.SetGeometry(poly)\n\n# \u6dfb\u52a0\u8981\u7d20\u5230\u56fe\u5c42\noutLayer.CreateFeature(outFeature)\n\n# \u91ca\u653e\u8981\u7d20\noutFeature = None\n\n# \u4fdd\u5b58\u5173\u95ed\u6570\u636e\u6e90\noutDataSource = None\n</code></pre> <pre><code>from osgeo import ogr\n\n# \u521b\u5efa\u6d4b\u8bd5\u591a\u8fb9\u5f62\nring = ogr.Geometry(ogr.wkbLinearRing)\nring.AddPoint(1179091.1646903288, 712782.8838459781)\nring.AddPoint(1161053.0218226474, 667456.2684348812)\nring.AddPoint(1214704.933941905, 641092.8288590391)\nring.AddPoint(1228580.428455506, 682719.3123998424)\nring.AddPoint(1218405.0658121984, 721108.1805541387)\nring.AddPoint(1179091.1646903288, 712782.8838459781)\npoly = ogr.Geometry(ogr.wkbPolygon)\npoly.AddGeometry(ring)\n\ngeojson = poly.ExportToJson()\nprint(geojson)\n</code></pre>"},{"location":"%E5%87%A0%E4%BD%95/#wkt_1","title":"\u8f93\u51fa\u51e0\u4f55\u5230WKT","text":"<pre><code>from osgeo import ogr\n\n# \u521b\u5efa\u6d4b\u8bd5\u51e0\u4f55\nring = ogr.Geometry(ogr.wkbLinearRing)\nring.AddPoint(1179091.1646903288, 712782.8838459781)\nring.AddPoint(1161053.0218226474, 667456.2684348812)\nring.AddPoint(1214704.933941905, 641092.8288590391)\nring.AddPoint(1228580.428455506, 682719.3123998424)\nring.AddPoint(1218405.0658121984, 721108.1805541387)\nring.AddPoint(1179091.1646903288, 712782.8838459781)\ngeom_poly = ogr.Geometry(ogr.wkbPolygon)\ngeom_poly.AddGeometry(ring)\n\n# \u8f93\u51fa\u51e0\u4f55\u5230WKT\nwkt = geom_poly.ExportToWkt()\nprint(wkt)\n</code></pre>"},{"location":"%E5%87%A0%E4%BD%95/#kml","title":"\u8f93\u51fa\u51e0\u4f55\u5230KML","text":"<pre><code>from osgeo import ogr\n\n# \u521b\u5efa\u6d4b\u8bd5\u51e0\u4f55\nring = ogr.Geometry(ogr.wkbLinearRing)\nring.AddPoint(1179091.1646903288, 712782.8838459781)\nring.AddPoint(1161053.0218226474, 667456.2684348812)\nring.AddPoint(1214704.933941905, 641092.8288590391)\nring.AddPoint(1228580.428455506, 682719.3123998424)\nring.AddPoint(1218405.0658121984, 721108.1805541387)\nring.AddPoint(1179091.1646903288, 712782.8838459781)\ngeom_poly = ogr.Geometry(ogr.wkbPolygon)\ngeom_poly.AddGeometry(ring)\n\nkml = geom_poly.ExportToKML()\nprint(kml)\n</code></pre>"},{"location":"%E5%87%A0%E4%BD%95/#wkb_1","title":"\u8f93\u51fa\u51e0\u4f55\u5230WKB","text":"<pre><code>from osgeo import ogr\n\n# \u521b\u5efa\u6d4b\u8bd5\u51e0\u4f55\nring = ogr.Geometry(ogr.wkbLinearRing)\nring.AddPoint(1179091.1646903288, 712782.8838459781)\nring.AddPoint(1161053.0218226474, 667456.2684348812)\nring.AddPoint(1214704.933941905, 641092.8288590391)\nring.AddPoint(1228580.428455506, 682719.3123998424)\nring.AddPoint(1218405.0658121984, 721108.1805541387)\nring.AddPoint(1179091.1646903288, 712782.8838459781)\ngeom_poly = ogr.Geometry(ogr.wkbPolygon)\ngeom_poly.AddGeometry(ring)\n\n# \u8f93\u51fa\u51e0\u4f55\u5230WKB\nwkb = geom_poly.ExportToWkb()\nprint(wkb)\n</code></pre>"},{"location":"%E5%87%A0%E4%BD%95/#_21","title":"\u5f3a\u5236\u591a\u8fb9\u5f62\u5230\u591a\u90e8\u4ef6\u591a\u8fb9\u5f62","text":"<pre><code>from osgeo import ogr\n\n# \u521b\u5efa\u6d4b\u8bd5\u51e0\u4f55\npoly_wkt= \"POLYGON ((1179091.164690328761935 712782.883845978067257,1161053.021822647424415 667456.268434881232679,1214704.933941904921085 641092.828859039116651,1228580.428455505985767 682719.312399842427112,1218405.065812198445201 721108.180554138729349,1179091.164690328761935 712782.883845978067257))\"\ngeom_poly = ogr.CreateGeometryFromWkt(poly_wkt)\n\n# \u5f3a\u5236\u591a\u8fb9\u5f62\u5230\u591a\u90e8\u4ef6\u591a\u8fb9\u5f62\nif geom_poly.GetGeometryType() == ogr.wkbPolygon:\n   geom_poly = ogr.ForceToMultiPolygon(geom_poly)\n   # \u5982\u679c\u8fed\u4ee3\u8981\u7d20\u53ea\u662f\u4e3a\u4e86\u66f4\u65b0\u51e0\u4f55(geometry)\uff0c\u53ef\u4ee5\u4f7f\u7528feature.SetGeometryDirectly(geom_poly)\n\n# \u8f93\u51fa\u51e0\u4f55\u5230WKT\nwkt = geom_poly.ExportToWkt()\nprint(wkt)\n</code></pre>"},{"location":"%E5%87%A0%E4%BD%95/#_22","title":"\u56db\u7b49\u5206\u591a\u8fb9\u5f62\u5e76\u521b\u5efa\u8d28\u5fc3","text":"<pre><code>from osgeo import ogr\n\n# \u521b\u5efa\u591a\u8fb9\u5f62\npoly_Wkt= \"POLYGON((-107.42631019589980212 40.11971708125970082,-107.42455436683293613 40.12061219666851741,-107.42020981542387403 40.12004414402532859,-107.41789122063043749 40.12149008687303819,-107.41419947746419439 40.11811617239460048,-107.41915181585792993 40.11761695654455906,-107.41998470913324581 40.11894245264452508,-107.42203317637793702 40.1184088144647788,-107.42430674991324224 40.1174448122981957,-107.42430674991324224 40.1174448122981957,-107.42631019589980212 40.11971708125970082))\"\ngeom_poly = ogr.CreateGeometryFromWkt(poly_Wkt)\n</code></pre> <pre><code># Create 4 square polygons\ngeom_poly_envelope = geom_poly.GetEnvelope()\nminX = geom_poly_envelope[0]\nminY = geom_poly_envelope[2]\nmaxX = geom_poly_envelope[1]\nmaxY = geom_poly_envelope[3]\n\n'''\ncoord0----coord1----coord2\n|           |           |\ncoord3----coord4----coord5\n|           |           |\ncoord6----coord7----coord8\n'''\ncoord0 = minX, maxY\ncoord1 = minX+(maxX-minX)/2, maxY\ncoord2 = maxX, maxY\ncoord3 = minX, minY+(maxY-minY)/2\ncoord4 = minX+(maxX-minX)/2, minY+(maxY-minY)/2\ncoord5 = maxX, minY+(maxY-minY)/2\ncoord6 = minX, minY\ncoord7 = minX+(maxX-minX)/2, minY\ncoord8 = maxX, minY\n\nringTopLeft = ogr.Geometry(ogr.wkbLinearRing)\nringTopLeft.AddPoint_2D(*coord0)\nringTopLeft.AddPoint_2D(*coord1)\nringTopLeft.AddPoint_2D(*coord4)\nringTopLeft.AddPoint_2D(*coord3)\nringTopLeft.AddPoint_2D(*coord0)\npolyTopLeft = ogr.Geometry(ogr.wkbPolygon)\npolyTopLeft.AddGeometry(ringTopLeft)\n\n\nringTopRight = ogr.Geometry(ogr.wkbLinearRing)\nringTopRight.AddPoint_2D(*coord1)\nringTopRight.AddPoint_2D(*coord2)\nringTopRight.AddPoint_2D(*coord5)\nringTopRight.AddPoint_2D(*coord4)\nringTopRight.AddPoint_2D(*coord1)\npolyTopRight = ogr.Geometry(ogr.wkbPolygon)\npolyTopRight.AddGeometry(ringTopRight)\n\n\nringBottomLeft = ogr.Geometry(ogr.wkbLinearRing)\nringBottomLeft.AddPoint_2D(*coord3)\nringBottomLeft.AddPoint_2D(*coord4)\nringBottomLeft.AddPoint_2D(*coord7)\nringBottomLeft.AddPoint_2D(*coord6)\nringBottomLeft.AddPoint_2D(*coord3)\npolyBottomLeft = ogr.Geometry(ogr.wkbPolygon)\npolyBottomLeft.AddGeometry(ringBottomLeft)\n\n\nringBottomRight = ogr.Geometry(ogr.wkbLinearRing)\nringBottomRight.AddPoint_2D(*coord4)\nringBottomRight.AddPoint_2D(*coord5)\nringBottomRight.AddPoint_2D(*coord8)\nringBottomRight.AddPoint_2D(*coord7)\nringBottomRight.AddPoint_2D(*coord4)\npolyBottomRight = ogr.Geometry(ogr.wkbPolygon)\npolyBottomRight.AddGeometry(ringBottomRight)\n</code></pre> <pre><code># \u5bf9\u56db\u4e2a\u65b9\u683c\u591a\u8fb9\u5f62\u6c42\u4ea4\nquaterPolyTopLeft = polyTopLeft.Intersection(geom_poly)\nquaterPolyTopRight =  polyTopRight.Intersection(geom_poly)\nquaterPolyBottomLeft =  polyBottomLeft.Intersection(geom_poly)\nquaterPolyBottomRight =  polyBottomRight.Intersection(geom_poly)\n</code></pre> <pre><code># \u521b\u5efa\u8d28\u5fc3\ncentroidTopLeft = quaterPolyTopLeft.Centroid()\ncentroidTopRight =  quaterPolyTopRight.Centroid()\ncentroidBottomLeft =  quaterPolyBottomLeft.Centroid()\ncentroidBottomRight =  quaterPolyBottomRight.Centroid()\n</code></pre>"},{"location":"%E6%8A%95%E5%BD%B1/","title":"\u6295\u5f71","text":""},{"location":"%E6%8A%95%E5%BD%B1/#_2","title":"\u521b\u5efa\u6295\u5f71","text":"<pre><code>from osgeo import osr\nspatialRef = osr.SpatialReference()\nspatialRef.ImportFromEPSG(4326) #WGS84\n</code></pre>"},{"location":"%E6%8A%95%E5%BD%B1/#_3","title":"\u91cd\u6295\u5f71","text":"<pre><code>from osgeo import ogr\nfrom osgeo import osr\n\nsource = osr.SpatialReference()\nsource.ImportFromEPSG(2927)\n\ntarget = osr.SpatialReference()\ntarget.ImportFromEPSG(4326)\n\ntransform = osr.CoordinateTransformation(source, target)\n\npoint = ogr.CreateGeometryFromWkt(\"POINT (1120351.57 741921.42)\")\npoint.Transform(transform)\n\nprint (point.ExportToWkt())\n</code></pre>"},{"location":"%E6%8A%95%E5%BD%B1/#_4","title":"\u83b7\u53d6\u6295\u5f71","text":"<pre><code>from osgeo import ogr, osr\ndriver = ogr.GetDriverByName('ESRI Shapefile')\ndataset = driver.Open(r'./data/test.shp')\n\n# \u56fe\u5c42\nlayer = dataset.GetLayer()\nspatialRef = layer.GetSpatialRef()\n# \u51e0\u4f55\nfeature = layer.GetNextFeature()\ngeom = feature.GetGeometryRef()\nspatialRef = geom.GetSpatialReference()\n</code></pre>"},{"location":"%E6%8A%95%E5%BD%B1/#_5","title":"\u91cd\u6295\u5f71\u56fe\u5c42","text":"<pre><code>from osgeo import ogr, osr\nimport os\n\ndriver = ogr.GetDriverByName('ESRI Shapefile')\n\n# \u8f93\u5165\u7a7a\u95f4\u53c2\u8003\ninSpatialRef = osr.SpatialReference()\ninSpatialRef.ImportFromEPSG(2927)\n\n# \u8f93\u51fa\u7a7a\u95f4\u53c2\u8003\noutSpatialRef = osr.SpatialReference()\noutSpatialRef.ImportFromEPSG(4326)\n\n# \u521b\u5efa\u5750\u6807\u8f6c\u6362\ncoordTrans = osr.CoordinateTransformation(inSpatialRef, outSpatialRef)\n\n# \u8f93\u5165\u56fe\u5c42\ninDataSet = driver.Open(r'./data/test.shp')\ninLayer = inDataSet.GetLayer()\n\n# \u521b\u5efa\u8f93\u51fa\u56fe\u5c42\noutputShapefile = r'./data/test_4326.shp'\nif os.path.exists(outputShapefile):\n    driver.DeleteDataSource(outputShapefile)\noutDataSet = driver.CreateDataSource(outputShapefile)\noutLayer = outDataSet.CreateLayer(\n    \"test_4326\", \n    geom_type=ogr.wkbMultiPolygon,\n    srs=outSpatialRef # \u8f93\u51faprj\u6587\u4ef6\n)\n\n# \u6dfb\u52a0\u5b57\u6bb5\ninLayerDefn = inLayer.GetLayerDefn()\nfor i in range(0, inLayerDefn.GetFieldCount()):\n    fieldDefn = inLayerDefn.GetFieldDefn(i)\n    outLayer.CreateField(fieldDefn)\n\noutLayerDefn = outLayer.GetLayerDefn()\n\n# \u904d\u5386\u8981\u7d20\ninFeature = inLayer.GetNextFeature()\nwhile inFeature:\n    # \u83b7\u53d6\u51e0\u4f55\n    geom = inFeature.GetGeometryRef()\n    # \u91cd\u6295\u5f71\u51e0\u4f55\n    geom.Transform(coordTrans)\n    # \u521b\u5efa\u8981\u7d20\n    outFeature = ogr.Feature(outLayerDefn)\n    # \u8bbe\u7f6e\u51e0\u4f55\u3001\u5c5e\u6027\n    outFeature.SetGeometry(geom)\n    for i in range(0, outLayerDefn.GetFieldCount()):\n        outFeature.SetField(outLayerDefn.GetFieldDefn(i).GetNameRef(), inFeature.GetField(i))\n    # \u6dfb\u52a0\u8981\u7d20\n    outLayer.CreateFeature(outFeature)\n    # \u53d6\u6d88\u5f15\u7528\n    outFeature = None\n    inFeature = inLayer.GetNextFeature()\n\n# \u4fdd\u5b58\u5e76\u5173\u95ed\ninDataSet = None\noutDataSet = None\n</code></pre>"},{"location":"%E6%8A%95%E5%BD%B1/#_6","title":"\u8f93\u51fa\u6295\u5f71","text":"<pre><code>from osgeo import ogr, osr\ndriver = ogr.GetDriverByName('ESRI Shapefile')\ndataset = driver.Open(r'./data/test_4326.shp')\nlayer = dataset.GetLayer()\nspatialRef = layer.GetSpatialRef()\n\nspatialRef.ExportToWkt()\nspatialRef.ExportToPrettyWkt()\nspatialRef.ExportToPCI()\nspatialRef.ExportToUSGS()\nspatialRef.ExportToXML()\n</code></pre>"},{"location":"%E6%8A%95%E5%BD%B1/#esri","title":"\u521b\u5efaESRI\u6295\u5f71\u6587\u4ef6","text":"<pre><code>from osgeo import ogr, osr\n\nspatialRef = osr.SpatialReference()\nspatialRef.ImportFromEPSG(26912)\n\nspatialRef.MorphToESRI()\nfile = open('yourshpfile.prj', 'w')\nfile.write(spatialRef.ExportToWkt())\nfile.close()\n</code></pre>"},{"location":"%E6%A0%85%E6%A0%BC%E5%9B%BE%E5%B1%82/","title":"\u6805\u683c\u56fe\u5c42","text":""},{"location":"%E6%A0%85%E6%A0%BC%E5%9B%BE%E5%B1%82/#_2","title":"\u5173\u95ed\u6805\u683c\u6570\u636e","text":"<pre><code>from osgeo import gdal\n\n# \u6253\u5f00\u6570\u636e\nds = gdal.Open('test.tif')\n\n# \u5173\u95ed\u6570\u636e\uff08\u975e\u5fc5\u987b\uff09\nds = None\n</code></pre>"},{"location":"%E6%A0%85%E6%A0%BC%E5%9B%BE%E5%B1%82/#_3","title":"\u83b7\u53d6\u5143\u6570\u636e","text":"<pre><code>from osgeo import gdal\ngtif = gdal.Open( \"merge.tif\" )\nprint (gtif.GetMetadata())\n</code></pre>"},{"location":"%E6%A0%85%E6%A0%BC%E5%9B%BE%E5%B1%82/#_4","title":"\u6ce2\u6bb5\u878d\u5408","text":"<pre><code>from osgeo import gdal\n# \u6253\u5f00\u6570\u636e\nds1=gdal.Open(\"LM51130321998341HAJ00_B1.TIF\")\nds2=gdal.Open(\"LM51130321998341HAJ00_B2.TIF\")\nds3=gdal.Open(\"LM51130321998341HAJ00_B3.TIF\")\nds4=gdal.Open(\"LM51130321998341HAJ00_B4.TIF\")\n# \u83b7\u53d6\u6ce2\u6bb5\nb1=ds1.GetRasterBand(1)\nb2=ds1.GetRasterBand(1)\nb3=ds1.GetRasterBand(1)\nb4=ds1.GetRasterBand(1)\n# \u521b\u5efa\u6570\u636e\ndriver=gdal.GetDriverByName(\"GTiff\")\nout_ds=driver.Create('merge.tif',ds1.RasterXSize,ds1.RasterYSize,4,gdal.GDT_Byte)\n# \u8bbe\u7f6e\u5750\u6807\u548c\u6295\u5f71\nout_ds.SetGeoTransform(ds1.GetGeoTransform())\nout_ds.SetProjection(ds1.GetProjection())\n\nob1=out_ds.GetRasterBand(1)\nob2=out_ds.GetRasterBand(2)\nob3=out_ds.GetRasterBand(3)\nob4=out_ds.GetRasterBand(4)\n# \u5199\u5165\u6570\u636e\nob1.WriteArray(b1.ReadAsArray())\nob2.WriteArray(b2.ReadAsArray())\nob3.WriteArray(b3.ReadAsArray())\nob4.WriteArray(b4.ReadAsArray())\n\nout_ds=None\n</code></pre>"},{"location":"%E6%A0%85%E6%A0%BC%E5%9B%BE%E5%B1%82/#_5","title":"\u83b7\u53d6\u6ce2\u6bb5","text":"<pre><code>from osgeo import gdal\nimport sys\n# \u5141\u8bb8python\u5f02\u5e38\ngdal.UseExceptions()\n\ntry:\n    src_ds = gdal.Open( \"merge.tif\" )\nexcept RuntimeError as e:\n    print(e)\n    sys.exit(1)\n\ntry:\n    srcband = src_ds.GetRasterBand(1)\nexcept RuntimeError as e:\n    # \u8bd5\u4e00\u4e0b GetRasterBand(10)\n    print(e)\n    sys.exit(1)\n</code></pre>"},{"location":"%E6%A0%85%E6%A0%BC%E5%9B%BE%E5%B1%82/#_6","title":"\u904d\u5386\u6ce2\u6bb5","text":"<pre><code>from osgeo import gdal\nimport sys\n\nsrc_ds = gdal.Open( \"merge.tif\" )\n\nprint (\"\u6ce2\u6bb5\u4e2a\u6570: \", src_ds.RasterCount)\nfor band in range( src_ds.RasterCount ):\n    band += 1\n    print (\"\u83b7\u53d6\u6ce2\u6bb5: \", band)\n    srcband = src_ds.GetRasterBand(band)\n    if srcband is None:\n        continue\n\n    stats = srcband.GetStatistics( True, True )\n    if stats is None:\n        continue\n\n    print (\"[ STATS ] =  Minimum=%.3f, Maximum=%.3f, Mean=%.3f, StdDev=%.3f\" % ( \\\n                stats[0], stats[1], stats[2], stats[3] ))\n</code></pre>"},{"location":"%E6%A0%85%E6%A0%BC%E5%9B%BE%E5%B1%82/#_7","title":"\u83b7\u53d6\u6ce2\u6bb5\u4fe1\u606f","text":"<pre><code>from osgeo import gdal\nimport sys\ngdal.UseExceptions()\n\n\ndef main( band_num, input_file ):\n    src_ds = gdal.Open( input_file )\n\n    try:\n        srcband = src_ds.GetRasterBand(band_num)\n    except RuntimeError as e:\n        print( e)\n        sys.exit(1)\n\n\n    print (\"[ NO DATA VALUE ] = \", srcband.GetNoDataValue())\n    print (\"[ MIN ] = \", srcband.GetMinimum())\n    print (\"[ MAX ] = \", srcband.GetMaximum())\n    print (\"[ SCALE ] = \", srcband.GetScale())\n    print( \"[ UNIT TYPE ] = \", srcband.GetUnitType())\n    ctable = srcband.GetColorTable()\n\n    if ctable is None:\n        print ('No ColorTable found')\n        sys.exit(1)\n\n    print (\"[ COLOR TABLE COUNT ] = \", ctable.GetCount())\n    for i in range( 0, ctable.GetCount() ):\n        entry = ctable.GetColorEntry( i )\n        if not entry:\n            continue\n        print (\"[ COLOR ENTRY RGB ] = \", ctable.GetColorEntryAsRGB( i, entry ))\n\nmain( 1,\"merge.tif\" )\n</code></pre>"},{"location":"%E6%A0%85%E6%A0%BC%E5%9B%BE%E5%B1%82/#_8","title":"\u591a\u8fb9\u5f62\u5316\u6805\u683c\u6ce2\u6bb5","text":"<pre><code>from osgeo import gdal, ogr\nimport sys\n\ngdal.UseExceptions()\n\nsrc_ds = gdal.Open( \"test.tif\" )\n\nsrcband = src_ds.GetRasterBand(3)\n\ndst_layername = \"POLYGONIZED_STUFF\"\ndrv = ogr.GetDriverByName(\"ESRI Shapefile\")\ndst_ds = drv.CreateDataSource( dst_layername + \".shp\" )\ndst_layer = dst_ds.CreateLayer(dst_layername, srs = None )\n\ngdal.Polygonize( srcband, None, dst_layer, -1, [], callback=None )\n</code></pre>"},{"location":"%E6%A0%85%E6%A0%BC%E5%9B%BE%E5%B1%82/#_9","title":"\u6805\u683c\u5316\u77e2\u91cf\u6570\u636e","text":"<pre><code>from osgeo import gdal, ogr\n\n# \u5b9a\u4e49\u50cf\u7d20\u5927\u5c0f\u548c\u65e0\u6548\u503c\npixel_size = 25\nNoData_value = -9999\n\nvector_fn = 'test.shp'\n\nraster_fn = 'test.tif'\n\n# \u6253\u5f00\u6570\u636e\u5e76\u8bfb\u53d6\u8303\u56f4\nsource_ds = ogr.Open(vector_fn)\nsource_layer = source_ds.GetLayer()\nx_min, x_max, y_min, y_max = source_layer.GetExtent()\n\nx_res = int((x_max - x_min) / pixel_size)\ny_res = int((y_max - y_min) / pixel_size)\ntarget_ds = gdal.GetDriverByName('GTiff').Create(raster_fn, x_res, y_res, 1, gdal.GDT_Byte)\ntarget_ds.SetGeoTransform((x_min, pixel_size, 0, y_max, 0, -pixel_size))\nband = target_ds.GetRasterBand(1)\nband.SetNoDataValue(NoData_value)\n\n# \u6805\u683c\u5316\ngdal.RasterizeLayer(target_ds, [1], source_layer, burn_values=[0])\n</code></pre>"},{"location":"%E6%A0%85%E6%A0%BC%E5%9B%BE%E5%B1%82/#shapefile","title":"\u7528shapefile\u88c1\u526a\u6805\u683c","text":"<pre><code>from osgeo import gdal, gdalnumeric, ogr, osr\nfrom PIL import Image, ImageDraw\nimport os, sys\ngdal.UseExceptions()\n\n\ndef imageToArray(i):\n\"\"\"\n    Image\u8f6c\u6362\u4e3a\u6570\u7ec4.\n    \"\"\"\n    a=gdalnumeric.fromstring(i.tostring(),'b')\n    a.shape=i.im.size[1], i.im.size[0]\n    return a\n\ndef arrayToImage(a):\n\"\"\"\n   \u6570\u7ec4\u8f6c\u6362\u4e3aImage.\n    \"\"\"\n    i=Image.fromstring('L',(a.shape[1],a.shape[0]),\n            (a.astype('b')).tostring())\n    return i\n\ndef world2Pixel(geoMatrix, x, y):\n\"\"\"\n  \u7528\u5730\u7406\u4eff\u5c04\u53d8\u6362\u8ba1\u7b97\u50cf\u7d20\u5750\u6807\n  \"\"\"\n  ulX = geoMatrix[0]\n  ulY = geoMatrix[3]\n  xDist = geoMatrix[1]\n  yDist = geoMatrix[5]\n  rtnX = geoMatrix[2]\n  rtnY = geoMatrix[4]\n  pixel = int((x - ulX) / xDist)\n  line = int((ulY - y) / xDist)\n  return (pixel, line)\n\n#\n#  EDIT: this is basically an overloaded\n#  version of the gdal_array.OpenArray passing in xoff, yoff explicitly\n#  so we can pass these params off to CopyDatasetInfo\n#\ndef OpenArray( array, prototype_ds = None, xoff=0, yoff=0 ):\n    ds = gdal.Open( gdalnumeric.GetArrayFilename(array) )\n\n    if ds is not None and prototype_ds is not None:\n        if type(prototype_ds).__name__ == 'str':\n            prototype_ds = gdal.Open( prototype_ds )\n        if prototype_ds is not None:\n            gdalnumeric.CopyDatasetInfo( prototype_ds, ds, xoff=xoff, yoff=yoff )\n    return ds\n\ndef histogram(a, bins=range(0,256)):\n\"\"\"\n  Histogram function for multi-dimensional array.\n  a = array\n  bins = range of numbers to match\n  \"\"\"\n  fa = a.flat\n  n = gdalnumeric.searchsorted(gdalnumeric.sort(fa), bins)\n  n = gdalnumeric.concatenate([n, [len(fa)]])\n  hist = n[1:]-n[:-1]\n  return hist\n\ndef stretch(a):\n\"\"\"\n  Performs a histogram stretch on a gdalnumeric array image.\n  \"\"\"\n  hist = histogram(a)\n  im = arrayToImage(a)\n  lut = []\n  for b in range(0, len(hist), 256):\n    # step size\n    step = reduce(operator.add, hist[b:b+256]) / 255\n    # create equalization lookup table\n    n = 0\n    for i in range(256):\n      lut.append(n / step)\n      n = n + hist[i+b]\n  im = im.point(lut)\n  return imageToArray(im)\n\ndef main( shapefile_path, raster_path ):\n    # \u8bfb\u53d6\u6570\u636e\u5230\u6570\u7ec4\n    srcArray = gdalnumeric.LoadFile(raster_path)\n\n    # \u83b7\u53d6\u5730\u7406\u4eff\u5c04\u53d8\u6362\n    srcImage = gdal.Open(raster_path)\n    geoTrans = srcImage.GetGeoTransform()\n\n    # \u83b7\u53d6\u77e2\u91cf\u56fe\u5c42\n    shapef = ogr.Open(shapefile_path)\n    lyr = shapef.GetLayer( os.path.split( os.path.splitext( shapefile_path )[0] )[1] )\n    poly = lyr.GetNextFeature()\n\n    # \u83b7\u53d6\u8303\u56f4\n    minX, maxX, minY, maxY = lyr.GetExtent()\n    ulX, ulY = world2Pixel(geoTrans, minX, maxY)\n    lrX, lrY = world2Pixel(geoTrans, maxX, minY)\n\n    # \u8ba1\u7b97\u50cf\u7d20\u5927\u5c0f\n    pxWidth = int(lrX - ulX)\n    pxHeight = int(lrY - ulY)\n\n    clip = srcArray[:, ulY:lrY, ulX:lrX]\n\n    #\n    # \u50cf\u7d20\u504f\u79fb\n    #\n    xoffset =  ulX\n    yoffset =  ulY\n    print (\"Xoffset, Yoffset = ( %f, %f )\" % ( xoffset, yoffset ))\n\n    # \u521b\u5efa\u65b0\u7684\u4eff\u5c04\u53d8\u6362\n    geoTrans = list(geoTrans)\n    geoTrans[0] = minX\n    geoTrans[3] = maxY\n\n    # Map points to pixels for drawing the\n    # boundary on a blank 8-bit,\n    # black and white, mask image.\n    points = []\n    pixels = []\n    geom = poly.GetGeometryRef()\n    pts = geom.GetGeometryRef(0)\n    for p in range(pts.GetPointCount()):\n      points.append((pts.GetX(p), pts.GetY(p)))\n    for p in points:\n      pixels.append(world2Pixel(geoTrans, p[0], p[1]))\n    rasterPoly = Image.new(\"L\", (pxWidth, pxHeight), 1)\n    rasterize = ImageDraw.Draw(rasterPoly)\n    rasterize.polygon(pixels, 0)\n    mask = imageToArray(rasterPoly)\n\n    # Clip the image using the mask\n    clip = gdalnumeric.choose(mask, \\\n        (clip, 0)).astype(gdalnumeric.uint8)\n\n    # This image has 3 bands so we stretch each one to make them\n    # visually brighter\n    for i in range(3):\n      clip[i,:,:] = stretch(clip[i,:,:])\n\n    # Save new tiff\n    #\n    #  EDIT: instead of SaveArray, let's break all the\n    #  SaveArray steps out more explicity so\n    #  we can overwrite the offset of the destination\n    #  raster\n    #\n    ### the old way using SaveArray\n    #\n    # gdalnumeric.SaveArray(clip, \"OUTPUT.tif\", format=\"GTiff\", prototype=raster_path)\n    #\n    ###\n    #\n    gtiffDriver = gdal.GetDriverByName( 'GTiff' )\n    if gtiffDriver is None:\n        raise ValueError(\"Can't find GeoTiff Driver\")\n    gtiffDriver.CreateCopy( \"OUTPUT.tif\",\n        OpenArray( clip, prototype_ds=raster_path, xoff=xoffset, yoff=yoffset )\n    )\n\n    # Save as an 8-bit jpeg for an easy, quick preview\n    clip = clip.astype(gdalnumeric.uint8)\n    gdalnumeric.SaveArray(clip, \"OUTPUT.jpg\", format=\"JPEG\")\n\n    gdal.ErrorReset()\n\n\nif __name__ == '__main__':\n\n    #\n    # example run : $ python clip.py /&lt;full-path&gt;/&lt;shapefile-name&gt;.shp /&lt;full-path&gt;/&lt;raster-name&gt;.tif\n    #\n    if len( sys.argv ) &lt; 2:\n        print \"[ ERROR ] you must two args. 1) the full shapefile path and 2) the full raster path\"\n        sys.exit( 1 )\n\n    main( sys.argv[1], sys.argv[2] )\n</code></pre>"},{"location":"%E6%A0%85%E6%A0%BC%E5%9B%BE%E5%B1%82/#_10","title":"\u533a\u57df\u7edf\u8ba1","text":"<pre><code>import gdal, ogr, osr, numpy\nimport sys\n\n\ndef zonal_stats(feat, input_zone_polygon, input_value_raster):\n\n    # Open data\n    raster = gdal.Open(input_value_raster)\n    shp = ogr.Open(input_zone_polygon)\n    lyr = shp.GetLayer()\n\n    # Get raster georeference info\n    transform = raster.GetGeoTransform()\n    xOrigin = transform[0]\n    yOrigin = transform[3]\n    pixelWidth = transform[1]\n    pixelHeight = transform[5]\n\n    # Reproject vector geometry to same projection as raster\n    sourceSR = lyr.GetSpatialRef()\n    targetSR = osr.SpatialReference()\n    targetSR.ImportFromWkt(raster.GetProjectionRef())\n    coordTrans = osr.CoordinateTransformation(sourceSR,targetSR)\n    feat = lyr.GetNextFeature()\n    geom = feat.GetGeometryRef()\n    geom.Transform(coordTrans)\n\n    # Get extent of feat\n    geom = feat.GetGeometryRef()\n    if (geom.GetGeometryName() == 'MULTIPOLYGON'):\n        count = 0\n        pointsX = []; pointsY = []\n        for polygon in geom:\n            geomInner = geom.GetGeometryRef(count)\n            ring = geomInner.GetGeometryRef(0)\n            numpoints = ring.GetPointCount()\n            for p in range(numpoints):\n                    lon, lat, z = ring.GetPoint(p)\n                    pointsX.append(lon)\n                    pointsY.append(lat)\n            count += 1\n    elif (geom.GetGeometryName() == 'POLYGON'):\n        ring = geom.GetGeometryRef(0)\n        numpoints = ring.GetPointCount()\n        pointsX = []; pointsY = []\n        for p in range(numpoints):\n                lon, lat, z = ring.GetPoint(p)\n                pointsX.append(lon)\n                pointsY.append(lat)\n\n    else:\n        sys.exit(\"ERROR: Geometry needs to be either Polygon or Multipolygon\")\n\n    xmin = min(pointsX)\n    xmax = max(pointsX)\n    ymin = min(pointsY)\n    ymax = max(pointsY)\n\n    # Specify offset and rows and columns to read\n    xoff = int((xmin - xOrigin)/pixelWidth)\n    yoff = int((yOrigin - ymax)/pixelWidth)\n    xcount = int((xmax - xmin)/pixelWidth)+1\n    ycount = int((ymax - ymin)/pixelWidth)+1\n\n    # Create memory target raster\n    target_ds = gdal.GetDriverByName('MEM').Create('', xcount, ycount, 1, gdal.GDT_Byte)\n    target_ds.SetGeoTransform((\n        xmin, pixelWidth, 0,\n        ymax, 0, pixelHeight,\n    ))\n\n    # Create for target raster the same projection as for the value raster\n    raster_srs = osr.SpatialReference()\n    raster_srs.ImportFromWkt(raster.GetProjectionRef())\n    target_ds.SetProjection(raster_srs.ExportToWkt())\n\n    # Rasterize zone polygon to raster\n    gdal.RasterizeLayer(target_ds, [1], lyr, burn_values=[1])\n\n    # Read raster as arrays\n    banddataraster = raster.GetRasterBand(1)\n    dataraster = banddataraster.ReadAsArray(xoff, yoff, xcount, ycount).astype(numpy.float)\n\n    bandmask = target_ds.GetRasterBand(1)\n    datamask = bandmask.ReadAsArray(0, 0, xcount, ycount).astype(numpy.float)\n\n    # Mask zone of raster\n    zoneraster = numpy.ma.masked_array(dataraster,  numpy.logical_not(datamask))\n\n    # Calculate statistics of zonal raster\n    return numpy.average(zoneraster),numpy.mean(zoneraster),numpy.median(zoneraster),numpy.std(zoneraster),numpy.var(zoneraster)\n\n\ndef loop_zonal_stats(input_zone_polygon, input_value_raster):\n\n    shp = ogr.Open(input_zone_polygon)\n    lyr = shp.GetLayer()\n    featList = range(lyr.GetFeatureCount())\n    statDict = {}\n\n    for FID in featList:\n        feat = lyr.GetFeature(FID)\n        meanValue = zonal_stats(feat, input_zone_polygon, input_value_raster)\n        statDict[FID] = meanValue\n    return statDict\n\ndef main(input_zone_polygon, input_value_raster):\n    return loop_zonal_stats(input_zone_polygon, input_value_raster)\n\n\nif __name__ == \"__main__\":\n\n    #\n    # Returns for each feature a dictionary item (FID) with the statistical values in the following order: Average, Mean, Medain, Standard Deviation, Variance\n    #\n    # example run : $ python grid.py &lt;full-path&gt;&lt;output-shapefile-name&gt;.shp xmin xmax ymin ymax gridHeight gridWidth\n    #\n\n    if len( sys.argv ) != 3:\n        print \"[ ERROR ] you must supply two arguments: input-zone-shapefile-name.shp input-value-raster-name.tif \"\n        sys.exit( 1 )\n    print 'Returns for each feature a dictionary item (FID) with the statistical values in the following order: Average, Mean, Medain, Standard Deviation, Variance'\n    print main( sys.argv[1], sys.argv[2] )\n</code></pre>"},{"location":"%E6%A0%85%E6%A0%BC%E5%9B%BE%E5%B1%82/#_11","title":"\u4ece\u6570\u7ec4\u521b\u5efa\u6805\u683c","text":"<pre><code>import gdal, ogr, os, osr\nimport numpy as np\n\n\ndef array2raster(newRasterfn,rasterOrigin,pixelWidth,pixelHeight,array):\n\n    cols = array.shape[1]\n    rows = array.shape[0]\n    originX = rasterOrigin[0]\n    originY = rasterOrigin[1]\n\n    driver = gdal.GetDriverByName('GTiff')\n    outRaster = driver.Create(newRasterfn, cols, rows, 1, gdal.GDT_Byte)\n    outRaster.SetGeoTransform((originX, pixelWidth, 0, originY, 0, pixelHeight))\n    outband = outRaster.GetRasterBand(1)\n    outband.WriteArray(array)\n    outRasterSRS = osr.SpatialReference()\n    outRasterSRS.ImportFromEPSG(4326)\n    outRaster.SetProjection(outRasterSRS.ExportToWkt())\n    outband.FlushCache()\n\n\ndef main(newRasterfn,rasterOrigin,pixelWidth,pixelHeight,array):\n    # \u53cd\u8f6c\u6570\u7ec4\n    reversed_arr = array[::-1]\n    # \u6570\u7ec4\u8f6c\u6805\u683c\n    array2raster(newRasterfn,rasterOrigin,pixelWidth,pixelHeight,reversed_arr) \n\n\nif __name__ == \"__main__\":\n    rasterOrigin = (-123.25745,45.43013)\n    pixelWidth = 10\n    pixelHeight = 10\n    newRasterfn = 'test.tif'\n    array = np.array([[ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n                      [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n                      [ 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1],\n                      [ 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1],\n                      [ 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1],\n                      [ 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1],\n                      [ 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1],\n                      [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n                      [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n                      [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]])\n\n\n    main(newRasterfn,rasterOrigin,pixelWidth,pixelHeight,array)\n</code></pre>"},{"location":"%E6%A0%85%E6%A0%BC%E5%9B%BE%E5%B1%82/#_12","title":"\u66ff\u6362\u65e0\u6548\u503c","text":"<pre><code>import gdal, ogr, osr, os\nimport numpy as np\n\ndef raster2array(rasterfn):\n    raster = gdal.Open(rasterfn)\n    band = raster.GetRasterBand(1)\n    return band.ReadAsArray()\n\ndef getNoDataValue(rasterfn):\n    raster = gdal.Open(rasterfn)\n    band = raster.GetRasterBand(1)\n    return band.GetNoDataValue()\n\ndef array2raster(rasterfn,newRasterfn,array):\n    raster = gdal.Open(rasterfn)\n    geotransform = raster.GetGeoTransform()\n    originX = geotransform[0]\n    originY = geotransform[3]\n    pixelWidth = geotransform[1]\n    pixelHeight = geotransform[5]\n    cols = raster.RasterXSize\n    rows = raster.RasterYSize\n\n    driver = gdal.GetDriverByName('GTiff')\n    outRaster = driver.Create(newRasterfn, cols, rows, 1, gdal.GDT_Float32)\n    outRaster.SetGeoTransform((originX, pixelWidth, 0, originY, 0, pixelHeight))\n    outband = outRaster.GetRasterBand(1)\n    outband.WriteArray(array)\n    outRasterSRS = osr.SpatialReference()\n    outRasterSRS.ImportFromWkt(raster.GetProjectionRef())\n    outRaster.SetProjection(outRasterSRS.ExportToWkt())\n    outband.FlushCache()\n\n\nrasterfn = 'test.tif'\nnewValue = 0\nnewRasterfn = 'testNew.tif'\n\n# \u6805\u683c\u8f6c\u6570\u7ec4\nrasterArray = raster2array(rasterfn)\n\n# \u83b7\u53d6\u65e0\u6548\u503c\nnoDataValue = getNoDataValue(rasterfn)\n\n# \u66f4\u65b0\u65e0\u6548\u503c\nrasterArray[rasterArray == noDataValue] = newValue\n\n# \u6570\u7ec4\u8f6c\u6805\u683c\narray2raster(rasterfn,newRasterfn,rasterArray)\n</code></pre>"},{"location":"%E7%9F%A2%E9%87%8F%E5%9B%BE%E5%B1%82/","title":"\u77e2\u91cf\u56fe\u5c42","text":""},{"location":"%E7%9F%A2%E9%87%8F%E5%9B%BE%E5%B1%82/#_2","title":"\u5220\u9664\u6587\u4ef6","text":"<pre><code>from osgeo import ogr\nimport os\n\nDriverName = \"ESRI Shapefile\"      # e.g.: GeoJSON, ESRI Shapefile\nFileName = 'test.shp'\ndriver = ogr.GetDriverByName(DriverName)\nif os.path.exists(FileName):\n     driver.DeleteDataSource(FileName)\n</code></pre>"},{"location":"%E7%9F%A2%E9%87%8F%E5%9B%BE%E5%B1%82/#ogr","title":"\u83b7\u53d6OGR\u9a71\u52a8\u5217\u8868","text":"<pre><code>import ogr\ncnt = ogr.GetDriverCount()\nformatsList = []  # Empty List\n\nfor i in range(cnt):\n    driver = ogr.GetDriver(i)\n    driverName = driver.GetName()\n    if not driverName in formatsList:\n        formatsList.append(driverName)\n\nformatsList.sort() # \u6392\u5e8f\n\nprint(formatsList)\n</code></pre>"},{"location":"%E7%9F%A2%E9%87%8F%E5%9B%BE%E5%B1%82/#_3","title":"\u9a71\u52a8\u662f\u5426\u53ef\u7528","text":"<pre><code>from osgeo import ogr\n\n## Shapefile \u662f\u5426\u53ef\u7528?\ndriverName = \"ESRI Shapefile\"\ndrv = ogr.GetDriverByName( driverName )\nif drv is None:\n    print(\"%s \u9a71\u52a8\u4e0d\u53ef\u7528.\\n\" % driverName)\nelse:\n    print  (\"%s \u9a71\u52a8\u53ef\u7528.\\n\" % driverName)\n\n## PostgreSQL \u662f\u5426\u53ef\u7528?\ndriverName = \"PostgreSQL\"\ndrv = ogr.GetDriverByName( driverName )\nif drv is None:\n    print (\"%s \u9a71\u52a8\u4e0d\u53ef\u7528.\\n\" % driverName)\nelse:\n    print  (\"%s \u9a71\u52a8\u53ef\u7528.\\n\" % driverName)\n\n## File GeoDatabase \u662f\u5426\u53ef\u7528?\ndriverName = \"FileGDB\"\ndrv = ogr.GetDriverByName( driverName )\nif drv is None:\n    print (\"%s \u9a71\u52a8\u4e0d\u53ef\u7528.\\n\" % driverName)\nelse:\n    print  (\"%s \u9a71\u52a8\u53ef\u7528.\\n\" % driverName)\n\n## SDE \u662f\u5426\u53ef\u7528?\ndriverName = \"SDE\"\ndrv = ogr.GetDriverByName( driverName )\nif drv is None:\n    print (\"%s \u9a71\u52a8\u4e0d\u53ef\u7528.\\n\" % driverName)\nelse:\n    print  (\"%s \u9a71\u52a8\u53ef\u7528.\\n\" % driverName)\n</code></pre>"},{"location":"%E7%9F%A2%E9%87%8F%E5%9B%BE%E5%B1%82/#shapefile","title":"\u83b7\u53d6shapefile\u8981\u7d20\u4e2a\u6570","text":"<pre><code>import os\nfrom osgeo import ogr\n\ndaShapefile = r\"/test.shp\"\n\ndriver = ogr.GetDriverByName('ESRI Shapefile')\n\ndataSource = driver.Open(daShapefile, 0) # 0 \u53ea\u8bfb. 1 \u8bfb\u5199.\n\n# \u68c0\u67e5\u6570\u636e\u6e90\u662f\u5426\u6709\u6548.\nif dataSource is None:\n    print ('\u4e0d\u80fd\u6253\u5f00 %s' % (daShapefile))\nelse:\n    print ('\u6253\u5f00 %s' % (daShapefile))\n    layer = dataSource.GetLayer()\n    featureCount = layer.GetFeatureCount()\n    print (\"%s \u8981\u7d20\u4e2a\u6570: %d\" % (os.path.basename(daShapefile),featureCount))\n</code></pre>"},{"location":"%E7%9F%A2%E9%87%8F%E5%9B%BE%E5%B1%82/#postgis","title":"\u83b7\u53d6PostGIS\u56fe\u5c42","text":"<pre><code>from osgeo import ogr\n\ndatabaseServer = \"localhost\"\ndatabaseName = \"test2020\"\ndatabaseUser = \"postgres\"\ndatabasePW = \"123456\"\n\n\nconnString = \"PG: host=%s dbname=%s user=%s password=%s\" %(databaseServer,databaseName,databaseUser,databasePW)\n\nconn = ogr.Open(connString)\n\nlayerList = []\nfor i in conn:\n    daLayer = i.GetName()\n    if not daLayer in layerList:\n        layerList.append(daLayer)\n\nlayerList.sort()\n\nfor j in layerList:\n    print(j)\n\n# \u5173\u95ed\u8fde\u63a5\nconn = None\n</code></pre>"},{"location":"%E7%9F%A2%E9%87%8F%E5%9B%BE%E5%B1%82/#postgis_1","title":"\u83b7\u53d6PostGIS\u56fe\u5c42\u7684\u8981\u7d20","text":"<pre><code>from osgeo import ogr\nimport sys\n\ndatabaseServer = \"localhost\"\ndatabaseName = \"test2020\"\ndatabaseUser = \"postgres\"\ndatabasePW = \"123456\"\nconnString = \"PG: host=%s dbname=%s user=%s password=%s\" % (databaseServer,databaseName,databaseUser,databasePW)\n\ndef GetPGLayer( lyr_name ):\n    conn = ogr.Open(connString)\n\n    lyr = conn.GetLayer( lyr_name )\n    if lyr is None:\n        sys.exit( 1 )\n\n    featureCount = lyr.GetFeatureCount()\n    print (\"%s \u8981\u7d20\u4e2a\u6570 : %d\" % ( lyr_name , featureCount ))\n\n    # \u5173\u95ed\u8fde\u63a5\n    conn = None\n\n\nif __name__ == '__main__':\n    GetPGLayer( \"test\" )\n</code></pre>"},{"location":"%E7%9F%A2%E9%87%8F%E5%9B%BE%E5%B1%82/#esri-gdb","title":"\u83b7\u53d6ESRI GDB\u56fe\u5c42","text":"<pre><code>import sys\nfrom osgeo import ogr\n\nogr.UseExceptions()\n\ndriver = ogr.GetDriverByName(\"OpenFileGDB\")\n\n# opening the FileGDB\ntry:\n    gdb = driver.Open(\"/sparse.gdb\", 0)\nexcept Exception as e:\n    print(e)\n    sys.exit()\n\nfeatsClassList = []\n\n# \u83b7\u53d6\u56fe\u5c42\nfor featsClass_idx in range(gdb.GetLayerCount()):\n    featsClass = gdb.GetLayerByIndex(featsClass_idx)\n    featsClassList.append(featsClass.GetName())\n\nfeatsClassList.sort()\n\nfor featsClass in featsClassList:\n    print (featsClass)\n</code></pre>"},{"location":"%E7%9F%A2%E9%87%8F%E5%9B%BE%E5%B1%82/#_4","title":"\u52a0\u8f7d\u6570\u636e\u5230\u5185\u5b58","text":"<pre><code>from osgeo import ogr\n\n# \u6253\u5f00\u8f93\u5165\u6570\u636e\u6e90\nindriver=ogr.GetDriverByName('SQLite')\nsrcdb = indriver.Open('/poly_spatialite.sqlite',0)\n\n# \u521b\u5efa\u5185\u5b58\u8f93\u51fa\u6570\u636e\u6e90\noutdriver=ogr.GetDriverByName('MEMORY')\nsource=outdriver.CreateDataSource('memData')\n\n# \u6253\u5f00\u5185\u5b58\u6570\u636e\ntmp=outdriver.Open('memData',1)\n\n# \u590d\u5236\u56fe\u5c42\u5230\u5185\u5b58\npoly_mem=source.CopyLayer(srcdb.GetLayer('poly'),'poly',['OVERWRITE=YES'])\n\n# \u65b0\u7684\u56fe\u5c42\u53ef\u76f4\u63a5\u88ab\u8bbf\u95ee\uff0cpoly_mem \u6216\u8005 source.GetLayer('poly'):\nlayer=source.GetLayer('poly')\nfor feature in layer:\n    feature.SetField('area',1)\n</code></pre>"},{"location":"%E7%9F%A2%E9%87%8F%E5%9B%BE%E5%B1%82/#_5","title":"\u904d\u5386\u8981\u7d20","text":"<pre><code>from osgeo import ogr\nimport os\n\nshapefile = \"/test.shp\"\ndriver = ogr.GetDriverByName(\"ESRI Shapefile\")\ndataSource = driver.Open(shapefile, 0)\nlayer = dataSource.GetLayer()\n\nfor feature in layer:\n    print( feature.GetField(\"area\"))\nlayer.ResetReading()\n</code></pre>"},{"location":"%E7%9F%A2%E9%87%8F%E5%9B%BE%E5%B1%82/#_6","title":"\u904d\u5386\u8981\u7d20\u51e0\u4f55","text":"<pre><code>from osgeo import ogr\nimport os\n\nshapefile = \"/test.shp\"\ndriver = ogr.GetDriverByName(\"ESRI Shapefile\")\ndataSource = driver.Open(shapefile, 0)\nlayer = dataSource.GetLayer()\n\nfor feature in layer:\n    geom = feature.GetGeometryRef()\n    # \u83b7\u53d6\u8d28\u5fc3\n    print (geom.Centroid().ExportToWkt())\n</code></pre>"},{"location":"%E7%9F%A2%E9%87%8F%E5%9B%BE%E5%B1%82/#_7","title":"\u8fc7\u6ee4\u5c5e\u6027","text":"<pre><code>from osgeo import ogr\nimport os\n\nshapefile = \"/test.shp\"\ndriver = ogr.GetDriverByName(\"ESRI Shapefile\")\ndataSource = driver.Open(shapefile, 0)\nlayer = dataSource.GetLayer()\n\nlayer.SetAttributeFilter(\"area = 5268.813\")\n\nfor feature in layer:\n    print (feature.GetField(\"area\"))\n</code></pre>"},{"location":"%E7%9F%A2%E9%87%8F%E5%9B%BE%E5%B1%82/#_8","title":"\u7a7a\u95f4\u8fc7\u6ee4","text":"<pre><code>from osgeo import ogr\nimport os\n\nshapefile = \"/test.shp\"\ndriver = ogr.GetDriverByName(\"ESRI Shapefile\")\ndataSource = driver.Open(shapefile, 0)\nlayer = dataSource.GetLayer()\n\nwkt = \"POLYGON ((479386 4764749,481098 4764226,480772 4763114,478681 4763159,479386 4764749))\"\nlayer.SetSpatialFilter(ogr.CreateGeometryFromWkt(wkt))\n\nfor feature in layer:\n    print (feature.GetField(\"area\"))\n</code></pre>"},{"location":"%E7%9F%A2%E9%87%8F%E5%9B%BE%E5%B1%82/#_9","title":"\u83b7\u53d6\u8981\u7d20\u5b57\u6bb5","text":"<pre><code>from osgeo import ogr\n\ndaShapefile = r\"/test.shp\"\n\ndataSource = ogr.Open(daShapefile)\ndaLayer = dataSource.GetLayer(0)\nlayerDefinition = daLayer.GetLayerDefn()\n\n\nfor i in range(layerDefinition.GetFieldCount()):\n    fieldName =  layerDefinition.GetFieldDefn(i).GetName()\n    fieldTypeCode = layerDefinition.GetFieldDefn(i).GetType()\n    fieldType = layerDefinition.GetFieldDefn(i).GetFieldTypeName(fieldTypeCode)\n    fieldWidth = layerDefinition.GetFieldDefn(i).GetWidth()\n    GetPrecision = layerDefinition.GetFieldDefn(i).GetPrecision()\n\n    print (fieldName + \" - \" + fieldType+ \" \" + str(fieldWidth) + \" \" + str(GetPrecision))\n</code></pre>"},{"location":"%E7%9F%A2%E9%87%8F%E5%9B%BE%E5%B1%82/#postgis_2","title":"\u83b7\u53d6PostGIS\u56fe\u5c42\u5b57\u6bb5","text":"<pre><code>from osgeo import ogr\nimport sys\n\ndatabaseServer = \"localhost\"\ndatabaseName = \"test2020\"\ndatabaseUser = \"postgres\"\ndatabasePW = \"123456\"\nconnString = \"PG: host=%s dbname=%s user=%s password=%s\" %(databaseServer,databaseName,databaseUser,databasePW)\n\n\ndef GetPGLayerFields( lyr_name ):\n    conn = ogr.Open(connString)\n\n    lyr = conn.GetLayer( lyr_name )\n    if lyr is None:\n        sys.exit( 1 )\n\n    lyrDefn = lyr.GetLayerDefn()\n\n\n    for i in range( lyrDefn.GetFieldCount() ):\n        fieldName =  lyrDefn.GetFieldDefn(i).GetName()\n        fieldTypeCode = lyrDefn.GetFieldDefn(i).GetType()\n        fieldType = lyrDefn.GetFieldDefn(i).GetFieldTypeName(fieldTypeCode)\n        fieldWidth = lyrDefn.GetFieldDefn(i).GetWidth()\n        GetPrecision = lyrDefn.GetFieldDefn(i).GetPrecision()\n\n        print (fieldName + \" - \" + fieldType+ \" \" + str(fieldWidth) + \" \" + str(GetPrecision))\n\n\nif __name__ == '__main__':\n    GetPGLayerFields( \"test\" )\n</code></pre>"},{"location":"%E7%9F%A2%E9%87%8F%E5%9B%BE%E5%B1%82/#_10","title":"\u83b7\u53d6\u56fe\u5c42\u80fd\u529b","text":"<pre><code>from osgeo import ogr\n\nds = ogr.Open(\"/test.shp\",0)\nlayer = ds.GetLayer()\ncapabilities = [\n    ogr.OLCRandomRead,\n    ogr.OLCSequentialWrite,\n    ogr.OLCRandomWrite,\n    ogr.OLCFastSpatialFilter,\n    ogr.OLCFastFeatureCount,\n    ogr.OLCFastGetExtent,\n    ogr.OLCCreateField,\n    ogr.OLCDeleteField,\n    ogr.OLCReorderFields,\n    ogr.OLCAlterFieldDefn,\n    ogr.OLCTransactions,\n    ogr.OLCDeleteFeature,\n    ogr.OLCFastSetNextByIndex,\n    ogr.OLCStringsAsUTF8,\n    ogr.OLCIgnoreFields\n]\n\nprint(\"\u56fe\u5c42\u80fd\u529b:\")\nfor cap in capabilities:\n    print(\"  %s = %s\" % (cap, layer.TestCapability(cap)))\n</code></pre>"},{"location":"%E7%9F%A2%E9%87%8F%E5%9B%BE%E5%B1%82/#wfs","title":"WFS\u56fe\u5c42\u548c\u904d\u5386\u8981\u7d20","text":"<pre><code>import sys\n\nfrom osgeo import ogr, osr, gdal\n\n# \u83b7\u53d6WFS\u9a71\u52a8\nwfs_drv = ogr.GetDriverByName('WFS')\n\n# \u52a0\u5feb\u67e5\u8be2\u591a\u56fe\u5c42WFS\u670d\u52a1\ngdal.SetConfigOption('OGR_WFS_LOAD_MULTIPLE_LAYER_DEFN', 'NO')\n\n# \u8bbe\u7f6e\u5206\u9875\u7684\u914d\u7f6e\u3002\u9002\u7528\u4e8eWFS 2.0\u670d\u52a1\u4ee5\u53caWFS 1.0\u548c1.1\u4ee5\u53ca\u5176\u4ed6\u4e00\u4e9b\u670d\u52a1\u3002\ngdal.SetConfigOption('OGR_WFS_PAGING_ALLOWED', 'YES')\ngdal.SetConfigOption('OGR_WFS_PAGE_SIZE', '10000')\n\nurl = 'http://sampleserver6.arcgisonline.com/arcgis/services/SampleWorldCities/MapServer/WFSServer'\nwfs_ds = wfs_drv.Open('WFS:' + url)\nif not wfs_ds:\n    sys.exit('\u9519\u8bef: \u4e0d\u80fd\u6253\u5f00 WFS \u6570\u636e\u6e90')\nelse:\n    pass\n\n# \u904d\u5386\u56fe\u5c42\nfor i in range(wfs_ds.GetLayerCount()):\n    layer = wfs_ds.GetLayerByIndex(i)\n    srs = layer.GetSpatialRef()\n    print ('Layer: %s, Features: %s, SR: %s...' % (layer.GetName(), layer.GetFeatureCount(), srs.ExportToWkt()[0:50]))\n\n    # \u904d\u5386\u8981\u7d20\n    feat = layer.GetNextFeature()\n    while feat is not None:\n        feat = layer.GetNextFeature()\n        # do something more..\n    feat = None\n\n# \u83b7\u53d6\u6307\u5b9a\u56fe\u5c42\nlayer = wfs_ds.GetLayerByName(\"esri:World\")\nif not layer:\n    sys.exit('\u9519\u8bef\uff1a\u4e0d\u80fd\u627e\u5230\u56fe\u5c42\uff1aesri:World')\nelse:\n    pass\n</code></pre>"},{"location":"%E7%9F%A2%E9%87%8F%E5%9B%BE%E5%B1%82/#http","title":"\u8bbe\u7f6eHTTP\u4ee3\u7406","text":"<pre><code>import sys\n\nfrom osgeo import ogr, osr, gdal\n\nserver = 'proxy.example.com'\nport = 3128\n\n# \u8bbe\u7f6e\u4ee3\u7406\ngdal.SetConfigOption('GDAL_HTTP_PROXY', server + ':' + port)\n\n# \u6ca1\u6709\u7528\u6237\u540d\u6216\u5bc6\u7801\u7684NTLM\u8bbe\u7f6e\u4ee3\u7406\u8eab\u4efd\u9a8c\u8bc1\u9009\u9879\uff0c\u56e0\u6b64\u5355\u70b9\u767b\u5f55\u6709\u6548\ngdal.SetConfigOption('GDAL_PROXY_AUTH', 'NTLM')\ngdal.SetConfigOption('GDAL_HTTP_PROXYUSERPWD', ' : ')\n\nds = ogr.Open('http://featureserver/cities/.geojson')\nif not ds:\n    sys.exit('ERROR: can not open GeoJSON datasource')\nlyr = ds.GetLayer('OGRGeoJSON')\nfor feat in lyr:\n    geom = feat.GetGeometryRef()\n    print( geom.ExportToWkt())\n</code></pre>"},{"location":"%E7%9F%A2%E9%87%8F%E5%9B%BE%E5%B1%82/#csvogrvrtlayer","title":"\u8bfb\u53d6CSV\u7ecf\u7eac\u5ea6\u4f5c\u4e3aOGRVRTLayer","text":"<p>GDAL/OGR\u5177\u6709\u865a\u62df\u683c\u5f0f\u89c4\u8303\uff0c\u8be5\u89c4\u8303\u5141\u8bb8\u4f60\u4ece\u8bf8\u5982CSV\u4e4b\u7c7b\u7684\u5e73\u9762\u8868\u6d3e\u751f\u56fe\u5c42\u2014\u2014\u5b83\u7684\u529f\u80fd\u8fdc\u4e0d\u6b62\u4e8e\u6b64\uff0c\u56e0\u6b64\u8bf7\u7ee7\u7eed\u9605\u8bfb\u3002\u5728\u4e0b\u9762\u7684\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u6b63\u5728\u8bfb\u53d6\u5e26\u6709X\u3001Y\u5217\u548c\u503c\u7684CSV\u3002\u8be5CSV\u6587\u4ef6\u7531XML\u6587\u4ef6\u5305\u88c5\uff0c\u8be5XML\u6587\u4ef6\u5c06\u5176\u63cf\u8ff0\u4e3aOGR\u5c42\u3002\u4ee5\u4e0b\u662f\u6240\u6709\u5fc5\u8981\u7684\u90e8\u5206\u548c\u4e00\u4e2a\u811a\u672c\uff0c\u8be5\u811a\u672c\u8bfb\u53d6XML\u6587\u4ef6\u5e76\u6253\u5370\u51fa\u70b9\u7684\u51e0\u4f55\u5f62\u72b6\u3002</p> <p>CSV\u6587\u4ef6\uff1a</p> <pre><code>ID,X,Y\n1,-127.234343,47.234325\n2,-127.003243,46.234343\n3,-127.345646,45.234324\n4,-126.234324,44.324234\n</code></pre> <p>XML\u6587\u4ef6</p> <pre><code>&lt;OGRVRTDataSource&gt;\n&lt;OGRVRTLayer name=\"example\"&gt;\n&lt;SrcDataSource&gt;example.csv&lt;/SrcDataSource&gt;\n&lt;SrcLayer&gt;example&lt;/SrcLayer&gt;\n&lt;GeometryType&gt;wkbPoint&lt;/GeometryType&gt;\n&lt;LayerSRS&gt;WGS84&lt;/LayerSRS&gt;\n&lt;GeometryField encoding=\"PointFromColumns\" x=\"X\" y=\"Y\"/&gt;\n&lt;/OGRVRTLayer&gt;\n&lt;/OGRVRTDataSource&gt;\n</code></pre> <pre><code>from osgeo import ogr\nogr.UseExceptions()\n\ninDataSource = ogr.Open(\"example_wrapper.vrt\")\nlyr = inDataSource.GetLayer('example')\nfor feat in lyr:\n    geom = feat.GetGeometryRef()\n    print (geom.ExportToWkt())\n</code></pre>"},{"location":"%E7%9F%A2%E9%87%8F%E5%9B%BE%E5%B1%82/#_11","title":"\u8ba1\u7b97\u8303\u56f4","text":"<pre><code>from osgeo import ogr\nimport os\n\n# Get a Layer's Extent\ninShapefile = \"states.shp\"\ninDriver = ogr.GetDriverByName(\"ESRI Shapefile\")\ninDataSource = inDriver.Open(inShapefile, 0)\ninLayer = inDataSource.GetLayer()\nextent = inLayer.GetExtent()\n\n# \u521b\u5efa\u591a\u8fb9\u5f62\nring = ogr.Geometry(ogr.wkbLinearRing)\nring.AddPoint(extent[0],extent[2])\nring.AddPoint(extent[1], extent[2])\nring.AddPoint(extent[1], extent[3])\nring.AddPoint(extent[0], extent[3])\nring.AddPoint(extent[0],extent[2])\npoly = ogr.Geometry(ogr.wkbPolygon)\npoly.AddGeometry(ring)\n\n# \u4fdd\u5b58\u5230\u65b0\u7684shp\u6587\u4ef6\noutShapefile = \"new.shp\"\noutDriver = ogr.GetDriverByName(\"ESRI Shapefile\")\n\n# \u5982\u679c\u5b58\u5728\uff0c\u5148\u5220\u9664\nif os.path.exists(outShapefile):\n    outDriver.DeleteDataSource(outShapefile)\n\n# \u521b\u5efa\u6570\u636e\u6e90\noutDataSource = outDriver.CreateDataSource(outShapefile)\noutLayer = outDataSource.CreateLayer(\"new\", geom_type=ogr.wkbPolygon)\n\n# \u6dfb\u52a0ID\u5b57\u6bb5\nidField = ogr.FieldDefn(\"id\", ogr.OFTInteger)\noutLayer.CreateField(idField)\n\n# \u521b\u5efa\u8981\u7d20\nfeatureDefn = outLayer.GetLayerDefn()\nfeature = ogr.Feature(featureDefn)\nfeature.SetGeometry(poly)\nfeature.SetField(\"id\", 1)\noutLayer.CreateFeature(feature)\nfeature = None\n\n# \u4fdd\u5b58\u5e76\u5173\u95ed\ninDataSource = None\noutDataSource = None\n</code></pre>"},{"location":"%E7%9F%A2%E9%87%8F%E5%9B%BE%E5%B1%82/#_12","title":"\u8ba1\u7b97\u51f8\u5305","text":"<pre><code>from osgeo import ogr\nimport os\n\n# \u83b7\u5f97\u56fe\u5c42\ninShapefile = \"test.shp\"\ninDriver = ogr.GetDriverByName(\"ESRI Shapefile\")\ninDataSource = inDriver.Open(inShapefile, 0)\ninLayer = inDataSource.GetLayer()\n\n# \u51e0\u4f55\u96c6\u5408\ngeomcol = ogr.Geometry(ogr.wkbGeometryCollection)\nfor feature in inLayer:\n    geomcol.AddGeometry(feature.GetGeometryRef())\n\n# \u8ba1\u7b97\u51f8\u5305\nconvexhull = geomcol.ConvexHull()\n\n# \u4fdd\u5b58\noutShapefile = \"test_convexhull.shp\"\noutDriver = ogr.GetDriverByName(\"ESRI Shapefile\")\n\n# \u5982\u679c\u5b58\u5728\uff0c\u5148\u5220\u9664\nif os.path.exists(outShapefile):\n    outDriver.DeleteDataSource(outShapefile)\n\n# \u8f93\u51fa\noutDataSource = outDriver.CreateDataSource(outShapefile)\noutLayer = outDataSource.CreateLayer(\"test_convexhull\", geom_type=ogr.wkbPolygon)\n\n# \u6dfb\u52a0ID\u5b57\u6bb5\nidField = ogr.FieldDefn(\"id\", ogr.OFTInteger)\noutLayer.CreateField(idField)\n\n# \u521b\u5efa\u8981\u7d20\nfeatureDefn = outLayer.GetLayerDefn()\nfeature = ogr.Feature(featureDefn)\nfeature.SetGeometry(convexhull)\nfeature.SetField(\"id\", 1)\noutLayer.CreateFeature(feature)\nfeature = None\n\n# \u4fdd\u5b58\u5e76\u5173\u95ed\ninDataSource = None\noutDataSource = None\n</code></pre>"},{"location":"%E7%9F%A2%E9%87%8F%E5%9B%BE%E5%B1%82/#_13","title":"\u8ba1\u7b97\u8d28\u5fc3","text":"<pre><code>from osgeo import ogr\nimport os\n\nogr.UseExceptions()\n\n# \u8f93\u5165\u56fe\u5c42\ninShapefile = \"test.shp\"\ninDriver = ogr.GetDriverByName(\"ESRI Shapefile\")\ninDataSource = inDriver.Open(inShapefile, 0)\ninLayer = inDataSource.GetLayer()\n\n# \u8f93\u51fa\u56fe\u5c42\noutShapefile = \"test_centroids.shp\"\noutDriver = ogr.GetDriverByName(\"ESRI Shapefile\")\n\n# \u5982\u679c\u5b58\u5728\uff0c\u5148\u5220\u9664\nif os.path.exists(outShapefile):\n    outDriver.DeleteDataSource(outShapefile)\n\noutDataSource = outDriver.CreateDataSource(outShapefile)\noutLayer = outDataSource.CreateLayer(\"test_centroids\", geom_type=ogr.wkbPoint)\n\n# \u6dfb\u52a0\u5b57\u6bb5\ninLayerDefn = inLayer.GetLayerDefn()\nfor i in range(0, inLayerDefn.GetFieldCount()):\n    fieldDefn = inLayerDefn.GetFieldDefn(i)\n    outLayer.CreateField(fieldDefn)\n\n# \u83b7\u5f97\u8981\u7d20\u5b9a\u4e49\noutLayerDefn = outLayer.GetLayerDefn()\n\n# \u6dfb\u52a0\u8981\u7d20\nfor i in range(0, inLayer.GetFeatureCount()):\n    # \u8f93\u5165\u8981\u7d20\n    inFeature = inLayer.GetFeature(i)\n    # \u8f93\u51fa\u8981\u7d20\n    outFeature = ogr.Feature(outLayerDefn)\n    # \u8bbe\u7f6e\u5b57\u6bb5\u503c\n    for i in range(0, outLayerDefn.GetFieldCount()):\n        outFeature.SetField(outLayerDefn.GetFieldDefn(i).GetNameRef(), inFeature.GetField(i))\n    # \u8bbe\u7f6e\u8d28\u5fc3\u51e0\u4f55\n    geom = inFeature.GetGeometryRef()\n    inFeature = None\n    centroid = geom.Centroid()\n    outFeature.SetGeometry(centroid)\n    # \u6dfb\u52a0\u65b0\u8981\u7d20\n    outLayer.CreateFeature(outFeature)\n    outFeature = None\n\n# \u4fdd\u5b58\u5e76\u5173\u95ed\ninDataSource = None\noutDataSource = None\n</code></pre>"},{"location":"%E7%9F%A2%E9%87%8F%E5%9B%BE%E5%B1%82/#shp","title":"\u521b\u5efa\u65b0\u7684shp\u6570\u636e\u5e76\u6dfb\u52a0\u6570\u636e","text":"<pre><code>import osgeo.ogr as ogr\nimport osgeo.osr as osr\nimport csv,os\n\n# \u4f7f\u7528\u5b57\u5178\u8bfb\u53d6\u6570\u636e\nreader = csv.DictReader(open(\"volcano_data.txt\",\"r\"),\n    delimiter='\\t',\n    quoting=csv.QUOTE_NONE)\n\n# \u9a71\u52a8\noutShapefile=\"volcanoes.shp\"\ndriver = ogr.GetDriverByName(\"ESRI Shapefile\")\n\nif os.path.exists(outShapefile):\n    driver.DeleteDataSource(outShapefile)\n\n# \u521b\u5efa\u6570\u636e\u6e90\ndata_source = driver.CreateDataSource(outShapefile)\n\n# \u521b\u5efa\u7a7a\u95f4\u53c2\u8003 WGS84\nsrs = osr.SpatialReference()\nsrs.ImportFromEPSG(4326)\n\n# \u521b\u5efa\u56fe\u5c42\nlayer = data_source.CreateLayer(\"volcanoes\", srs, ogr.wkbPoint)\n\n# \u6dfb\u52a0\u5b57\u6bb5\nfield_name = ogr.FieldDefn(\"Name\", ogr.OFTString)\nfield_name.SetWidth(24)\nlayer.CreateField(field_name)\nfield_region = ogr.FieldDefn(\"Region\", ogr.OFTString)\nfield_region.SetWidth(24)\nlayer.CreateField(field_region)\nlayer.CreateField(ogr.FieldDefn(\"Latitude\", ogr.OFTReal))\nlayer.CreateField(ogr.FieldDefn(\"Longitude\", ogr.OFTReal))\nlayer.CreateField(ogr.FieldDefn(\"Elevation\", ogr.OFTInteger))\n\n# \u5904\u7406\u6587\u672c\nfor row in reader:\n  # \u521b\u5efa\u8981\u7d20\n  feature = ogr.Feature(layer.GetLayerDefn())\n  # \u8bbe\u7f6e\u5c5e\u6027\u5b57\u6bb5\n  feature.SetField(\"Name\", row['Name'])\n  feature.SetField(\"Region\", row['Region'])\n  feature.SetField(\"Latitude\", row['Latitude'])\n  feature.SetField(\"Longitude\", row['Longitude'])\n  feature.SetField(\"Elevation\", row['Elevation'])\n\n  # \u521b\u5efaWKT\n  wkt = \"POINT(%f %f)\" %  (float(row['Longitude']) , float(row['Latitude']))\n\n  # \u521b\u5efa\u70b9\n  point = ogr.CreateGeometryFromWkt(wkt)\n\n  # \u8bbe\u7f6e\u51e0\u4f55\n  feature.SetGeometry(point)\n  # \u6dfb\u52a0\u8981\u7d20\n  layer.CreateFeature(feature)\n  # \u5220\u9664\u5f15\u7528\n  feature = None\n\n# \u4fdd\u5b58\u5173\u95ed\ndata_source = None\n</code></pre>"},{"location":"%E7%9F%A2%E9%87%8F%E5%9B%BE%E5%B1%82/#wktpostgis","title":"\u4eceWKT\u521b\u5efaPostGIS\u8868","text":"<pre><code>import ogr, osr\n\ndatabase = 'test2020'\nusr = 'postgres'\npw = '123456'\ntable = 'testtest'\n\nwkt = \"POINT (1120351.5712494177 741921.4223245403)\"\npoint = ogr.CreateGeometryFromWkt(wkt)\n\nconnectionString = \"PG:dbname='%s' user='%s' password='%s'\" % (database,usr,pw)\nogrds = ogr.Open(connectionString)\n\nsrs = osr.SpatialReference()\nsrs.ImportFromEPSG(4326)\n\nlayer = ogrds.CreateLayer(table, srs, ogr.wkbPoint, ['OVERWRITE=YES'] )\n\nlayerDefn = layer.GetLayerDefn()\n\nfeature = ogr.Feature(layerDefn)\nfeature.SetGeometry(point)\n\nlayer.StartTransaction()\nlayer.CreateFeature(feature)\nfeature = None\nlayer.CommitTransaction()\n</code></pre>"},{"location":"%E7%9F%A2%E9%87%8F%E5%9B%BE%E5%B1%82/#_14","title":"\u8fc7\u6ee4\u548c\u9009\u62e9","text":"<pre><code>ogr2ogr -f \"ESRI Shapefile\" junkmob.shp -select area -where \"area = 5268.813\" test.shp\n\n# \u8be5\u547d\u4ee4\u8bfb\u53d6parcel_address.shp\u5e76\u751f\u6210junkmob.shp\uff0carea=5268.813\u8f93\u51faarea\u5217\n</code></pre> <pre><code>from osgeo import ogr\nimport os, sys\n\ndef main( field_name_target ):\n    # \u8f93\u5165\u56fe\u5c42\n    inShapefile = \"test.shp\"\n    inDriver = ogr.GetDriverByName(\"ESRI Shapefile\")\n    inDataSource = inDriver.Open(inShapefile, 0)\n    inLayer = inDataSource.GetLayer()\n    inLayer.SetAttributeFilter(\"area = 5268.813\")\n\n    # \u521b\u5efa\u8f93\u51fa\u56fe\u5c42\n    outShapefile = os.path.join( os.path.split( inShapefile )[0], \"junkmob.shp\" )\n    outDriver = ogr.GetDriverByName(\"ESRI Shapefile\")\n\n    # \u5b58\u5728\uff0c\u5148\u5220\u9664\n    if os.path.exists(outShapefile):\n        outDriver.DeleteDataSource(outShapefile)\n\n    # \u521b\u5efa\u8f93\u51fashp\n    outDataSource = outDriver.CreateDataSource(outShapefile)\n    out_lyr_name = os.path.splitext( os.path.split( outShapefile )[1] )[0]\n    outLayer = outDataSource.CreateLayer( out_lyr_name, geom_type=ogr.wkbMultiPolygon )\n\n    # \u6dfb\u52a0\u5b57\u6bb5\n    inLayerDefn = inLayer.GetLayerDefn()\n    for i in range(0, inLayerDefn.GetFieldCount()):\n        fieldDefn = inLayerDefn.GetFieldDefn(i)\n        fieldName = fieldDefn.GetName()\n        if fieldName not in field_name_target:\n            continue\n        outLayer.CreateField(fieldDefn)\n\n    # \u8981\u7d20\u5b9a\u4e49\n    outLayerDefn = outLayer.GetLayerDefn()\n\n    # \u6dfb\u52a0\u8981\u7d20\n    for inFeature in inLayer:\n        # \u521b\u5efa\u8981\u7d20\n        outFeature = ogr.Feature(outLayerDefn)\n\n        # \u6dfb\u52a0\u5b57\u6bb5\n        for i in range(0, outLayerDefn.GetFieldCount()):\n            fieldDefn = outLayerDefn.GetFieldDefn(i)\n            fieldName = fieldDefn.GetName()\n            if fieldName not in field_name_target:\n                continue\n\n            outFeature.SetField(outLayerDefn.GetFieldDefn(i).GetNameRef(),\n                inFeature.GetField(i))\n\n        # \u8bbe\u7f6e\u51e0\u4f55\n        geom = inFeature.GetGeometryRef()\n        outFeature.SetGeometry(geom.Clone())\n        # \u521b\u5efa\u8981\u7d20\n        outLayer.CreateFeature(outFeature)\n        outFeature = None\n\n    # \u4fdd\u5b58\u5173\u95ed\n    inDataSource = None\n    outDataSource = None\n\n\nmain( [\"AREA\",\"EAS_ID\"])\n</code></pre>"},{"location":"%E7%9F%A2%E9%87%8F%E5%9B%BE%E5%B1%82/#_15","title":"\u5408\u5e76\u56fe\u5c42","text":"<pre><code>import os, ogr, osr\n\noutputMergefn = 'merge.shp'\ndirectory = \"/Users/UserName/Downloads/\"\nfileStartsWith = 'test'\nfileEndsWith = '.shp'\ndriverName = 'ESRI Shapefile'\ngeometryType = ogr.wkbPolygon\n\nout_driver = ogr.GetDriverByName( driverName )\nif os.path.exists(outputMergefn):\n    out_driver.DeleteDataSource(outputMergefn)\nout_ds = out_driver.CreateDataSource(outputMergefn)\nout_layer = out_ds.CreateLayer(outputMergefn, geom_type=geometryType)\n\nfileList = os.listdir(directory)\n\nfor file in fileList:\n    if file.startswith(fileStartsWith) and file.endswith(fileEndsWith):\n        print file\n        ds = ogr.Open(directory+file)\n        lyr = ds.GetLayer()\n        for feat in lyr:\n            out_feat = ogr.Feature(out_layer.GetLayerDefn())\n            out_feat.SetGeometry(feat.GetGeometryRef().Clone())\n            out_layer.CreateFeature(out_feat)\n            out_feat = None\n            out_layer.SyncToDisk()\n</code></pre>"},{"location":"%E7%9F%A2%E9%87%8F%E5%9B%BE%E5%B1%82/#osm","title":"\u83b7\u53d6OSM\u8857\u9053\u540d\u79f0","text":"<p>TODO\uff1a\u6d4b\u8bd5</p> <pre><code>import ogr\n\nds = ogr.Open('test.osm')\nlayer = ds.GetLayer()\n\nnameList = []\nfor feature in layer:\n    if feature.GetField(\"highway\") != None:\n        name = feature.GetField(\"name\")\n        if name != None and name not in nameList:\n            nameList.append(name)\n\nprint (nameList)\n</code></pre>"},{"location":"%E7%9F%A2%E9%87%8F%E5%9B%BE%E5%B1%82/#_16","title":"\u521b\u5efa\u9c7c\u7f51","text":"<pre><code>import os, sys\nimport ogr\nfrom math import ceil\n\n\ndef main(outputGridfn,xmin,xmax,ymin,ymax,gridHeight,gridWidth):\n    xmin = float(xmin)\n    xmax = float(xmax)\n    ymin = float(ymin)\n    ymax = float(ymax)\n    gridWidth = float(gridWidth)\n    gridHeight = float(gridHeight)\n\n    # get rows\n    rows = ceil((ymax-ymin)/gridHeight)\n    # get columns\n    cols = ceil((xmax-xmin)/gridWidth)\n\n    # start grid cell envelope\n    ringXleftOrigin = xmin\n    ringXrightOrigin = xmin + gridWidth\n    ringYtopOrigin = ymax\n    ringYbottomOrigin = ymax-gridHeight\n\n    # create output file\n    outDriver = ogr.GetDriverByName('ESRI Shapefile')\n    if os.path.exists(outputGridfn):\n        os.remove(outputGridfn)\n    outDataSource = outDriver.CreateDataSource(outputGridfn)\n    outLayer = outDataSource.CreateLayer(outputGridfn,geom_type=ogr.wkbPolygon )\n    featureDefn = outLayer.GetLayerDefn()\n\n    # create grid cells\n    countcols = 0\n    while countcols &lt; cols:\n        countcols += 1\n\n        # reset envelope for rows\n        ringYtop = ringYtopOrigin\n        ringYbottom =ringYbottomOrigin\n        countrows = 0\n\n        while countrows &lt; rows:\n            countrows += 1\n            ring = ogr.Geometry(ogr.wkbLinearRing)\n            ring.AddPoint(ringXleftOrigin, ringYtop)\n            ring.AddPoint(ringXrightOrigin, ringYtop)\n            ring.AddPoint(ringXrightOrigin, ringYbottom)\n            ring.AddPoint(ringXleftOrigin, ringYbottom)\n            ring.AddPoint(ringXleftOrigin, ringYtop)\n            poly = ogr.Geometry(ogr.wkbPolygon)\n            poly.AddGeometry(ring)\n\n            # add new geom to layer\n            outFeature = ogr.Feature(featureDefn)\n            outFeature.SetGeometry(poly)\n            outLayer.CreateFeature(outFeature)\n            outFeature = None\n\n            # new envelope for next poly\n            ringYtop = ringYtop - gridHeight\n            ringYbottom = ringYbottom - gridHeight\n\n        # new envelope for next poly\n        ringXleftOrigin = ringXleftOrigin + gridWidth\n        ringXrightOrigin = ringXrightOrigin + gridWidth\n\n    # Save and close DataSources\n    outDataSource = None\n\n\nif __name__ == \"__main__\":\n\n    #\n    # example run : $ python grid.py &lt;full-path&gt;&lt;output-shapefile-name&gt;.shp xmin xmax ymin ymax gridHeight gridWidth\n    #\n\n    if len( sys.argv ) != 8:\n        print \"[ ERROR ] you must supply seven arguments: output-shapefile-name.shp xmin xmax ymin ymax gridHeight gridWidth\"\n        sys.exit( 1 )\n\n    main( sys.argv[1], sys.argv[2], sys.argv[3], sys.argv[4], sys.argv[5], sys.argv[6], sys.argv[7] )\n</code></pre>"},{"location":"%E7%9F%A2%E9%87%8F%E5%9B%BE%E5%B1%82/#_17","title":"\u9762\u8f6c\u7ebf","text":"<pre><code>import ogr, os\n\ndef poly2line(input_poly,output_line):\n\n    source_ds = ogr.Open(input_poly)\n    source_layer = source_ds.GetLayer()\n\n    # polygon2geometryCollection\n    geomcol =  ogr.Geometry(ogr.wkbGeometryCollection)\n    for feat in source_layer:\n        geom = feat.GetGeometryRef()\n        ring = geom.GetGeometryRef(0)\n        geomcol.AddGeometry(ring)\n\n    # geometryCollection2shp\n    shpDriver = ogr.GetDriverByName(\"ESRI Shapefile\")\n    if os.path.exists(output_line):\n            shpDriver.DeleteDataSource(output_line)\n    outDataSource = shpDriver.CreateDataSource(output_line)\n    outLayer = outDataSource.CreateLayer(output_line, geom_type=ogr.wkbMultiLineString)\n    featureDefn = outLayer.GetLayerDefn()\n    outFeature = ogr.Feature(featureDefn)\n    outFeature.SetGeometry(geomcol)\n    outLayer.CreateFeature(outFeature)\n    outFeature = None\n\ndef main(input_poly,output_line):\n    poly2line(input_poly,output_line)\n\nif __name__ == \"__main__\":\n    input_poly = 'test_polygon.shp'\n    output_line = 'test_line.shp'\n\n    main(input_poly,output_line)\n</code></pre>"},{"location":"%E7%9F%A2%E9%87%8F%E5%9B%BE%E5%B1%82/#_18","title":"\u521b\u5efa\u7f13\u51b2\u533a","text":"<pre><code>import ogr, os\n\ndef createBuffer(inputfn, outputBufferfn, bufferDist):\n    inputds = ogr.Open(inputfn)\n    inputlyr = inputds.GetLayer()\n\n    shpdriver = ogr.GetDriverByName('ESRI Shapefile')\n    if os.path.exists(outputBufferfn):\n        shpdriver.DeleteDataSource(outputBufferfn)\n    outputBufferds = shpdriver.CreateDataSource(outputBufferfn)\n    bufferlyr = outputBufferds.CreateLayer(outputBufferfn, geom_type=ogr.wkbPolygon)\n    featureDefn = bufferlyr.GetLayerDefn()\n\n    for feature in inputlyr:\n        ingeom = feature.GetGeometryRef()\n        geomBuffer = ingeom.Buffer(bufferDist)\n\n        outFeature = ogr.Feature(featureDefn)\n        outFeature.SetGeometry(geomBuffer)\n        bufferlyr.CreateFeature(outFeature)\n        outFeature = None\n\ndef main(inputfn, outputBufferfn, bufferDist):\n    createBuffer(inputfn, outputBufferfn, bufferDist)\n\n\nif __name__ == \"__main__\":\n    inputfn = 'test.shp'\n    outputBufferfn = 'testBuffer.shp'\n    bufferDist = 10.0\n\n    main(inputfn, outputBufferfn, bufferDist)\n</code></pre>"},{"location":"%E7%9F%A2%E9%87%8F%E5%9B%BE%E5%B1%82/#_19","title":"\u6805\u683c\u5316\u77e2\u91cf\u56fe\u5c42","text":"<pre><code>import ogr, gdal\n\nvector_fn = 'test.shp'\n\n# \u5b9a\u4e49\u50cf\u7d20\u5927\u5c0f\u548c\u65e0\u6548\u503c\npixel_size = 25\nNoData_value = 255\n\n# \u6253\u5f00\u6570\u636e\u6e90\uff0c\u8bfb\u53d6\u6570\u636e\u8303\u56f4\nsource_ds = ogr.Open(vector_fn)\nsource_layer = source_ds.GetLayer()\nsource_srs = source_layer.GetSpatialRef()\nx_min, x_max, y_min, y_max = source_layer.GetExtent()\n\n# \u521b\u5efa\u76ee\u6807\u6570\u636e\u6e90\nx_res = int((x_max - x_min) / pixel_size)\ny_res = int((y_max - y_min) / pixel_size)\ntarget_ds = gdal.GetDriverByName('MEM').Create('', x_res, y_res, gdal.GDT_Byte)\ntarget_ds.SetGeoTransform((x_min, pixel_size, 0, y_max, 0, -pixel_size))\nband = target_ds.GetRasterBand(1)\nband.SetNoDataValue(NoData_value)\n\n# \u6805\u683c\u5316\ngdal.RasterizeLayer(target_ds, [1], source_layer, burn_values=[1])\n\n# \u8bfb\u53d6\u4e3a\u6570\u7ec4\narray = band.ReadAsArray()\nprint (array)\n</code></pre>"},{"location":"%E7%9F%A2%E9%87%8F%E5%9B%BE%E5%B1%82/#_20","title":"\u9762\u8f6c\u70b9","text":"<p>TODO\uff1a\u6d4b\u8bd5</p> <pre><code>import ogr, gdal\nimport numpy as np\nimport os\n\npolygon_fn = 'test.shp'\n\n# Define pixel_size which equals distance betweens points\npixel_size = 10\n\n# Open the data source and read in the extent\nsource_ds = ogr.Open(polygon_fn)\nsource_layer = source_ds.GetLayer()\nx_min, x_max, y_min, y_max = source_layer.GetExtent()\n\n# Create the destination data source\nx_res = int((x_max - x_min) / pixel_size)\ny_res = int((y_max - y_min) / pixel_size)\ntarget_ds = gdal.GetDriverByName('GTiff').Create('temp.tif', x_res, y_res, gdal.GDT_Byte)\ntarget_ds.SetGeoTransform((x_min, pixel_size, 0, y_max, 0, -pixel_size))\nband = target_ds.GetRasterBand(1)\nband.SetNoDataValue(255)\n\n# Rasterize\ngdal.RasterizeLayer(target_ds, [1], source_layer, burn_values=[1])\n\n# Read as array\narray = band.ReadAsArray()\n\nraster = gdal.Open('temp.tif')\ngeotransform = raster.GetGeoTransform()\n\n# Convert array to point coordinates\ncount = 0\nroadList = np.where(array == 1)\nmultipoint = ogr.Geometry(ogr.wkbMultiPoint)\nfor indexY in roadList[0]:\n    indexX = roadList[1][count]\n    geotransform = raster.GetGeoTransform()\n    originX = geotransform[0]\n    originY = geotransform[3]\n    pixelWidth = geotransform[1]\n    pixelHeight = geotransform[5]\n    Xcoord = originX+pixelWidth*indexX\n    Ycoord = originY+pixelHeight*indexY\n    point = ogr.Geometry(ogr.wkbPoint)\n    point.AddPoint(Xcoord, Ycoord)\n    multipoint.AddGeometry(point)\n    count += 1\n\n# Write point coordinates to Shapefile\nshpDriver = ogr.GetDriverByName(\"ESRI Shapefile\")\nif os.path.exists('points.shp'):\n    shpDriver.DeleteDataSource('points.shp')\noutDataSource = shpDriver.CreateDataSource('points.shp')\noutLayer = outDataSource.CreateLayer('points.shp', geom_type=ogr.wkbMultiPoint)\nfeatureDefn = outLayer.GetLayerDefn()\noutFeature = ogr.Feature(featureDefn)\noutFeature.SetGeometry(multipoint)\noutLayer.CreateFeature(outFeature)\noutFeature = None\n\n# Remove temporary files\nos.remove('temp.tif')\n</code></pre>"}]}